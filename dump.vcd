$date
	Tue Jun 27 15:49:16 2023
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_8227_template $end
$var wire 8 ! tb_dataBusOutput [7:0] $end
$var wire 8 " tb_AddressBusLow [7:0] $end
$var wire 8 # tb_AddressBusHigh [7:0] $end
$var reg 8 $ targetHighAddress [7:0] $end
$var reg 8 % targetLowAddress [7:0] $end
$var reg 1 & tb_clk $end
$var reg 8 ' tb_dataBusInput [7:0] $end
$var reg 1 ( tb_interruptRequest $end
$var reg 1 ) tb_nonMaskableInterrupt $end
$var reg 1 * tb_nrst $end
$var reg 1025 + test_name [1024:0] $end
$scope module top8227 $end
$var wire 1 & clk $end
$var wire 8 , dataBusInput [7:0] $end
$var wire 1 ( interruptRequest $end
$var wire 1 ) nonMaskableInterrupt $end
$var wire 1 * nrst $end
$var wire 1 - setIFlag $end
$var wire 1 . resetRunning $end
$var wire 8 / opcodeCurrentValue [7:0] $end
$var wire 1 0 nmiRunning $end
$var wire 6 1 instructionCode [5:0] $end
$var wire 1 2 getInstructionPreInjection $end
$var wire 1 3 getInstructionPostInjection $end
$var wire 1 4 freeCarry $end
$var wire 128 5 flags [127:0] $end
$var wire 8 6 dataBusOutput [7:0] $end
$var wire 1 7 aluCarryOut $end
$var wire 4 8 addressingCode [3:0] $end
$var wire 8 9 PSRCurrentValue [7:0] $end
$var wire 8 : AddressBusLow [7:0] $end
$var wire 8 ; AddressBusHigh [7:0] $end
$scope module decoder $end
$var wire 8 < opcode [7:0] $end
$var wire 2 = c [1:0] $end
$var wire 3 > b [2:0] $end
$var wire 3 ? a [2:0] $end
$var reg 4 @ ADDRESS [3:0] $end
$var reg 6 A CMD [5:0] $end
$scope begin comb_decoder $end
$upscope $end
$upscope $end
$scope module demux $end
$var wire 1 B PSR_C $end
$var wire 1 C PSR_N $end
$var wire 1 D PSR_V $end
$var wire 1 E PSR_Z $end
$var wire 1 & clk $end
$var wire 1 F irq $end
$var wire 1 G jump $end
$var wire 1 * nrst $end
$var wire 4 H preFFAddressingCode [3:0] $end
$var wire 6 I preFFInstructionCode [5:0] $end
$var wire 3 J state [2:0] $end
$var wire 1 - setInterruptFlag $end
$var wire 1 . reset $end
$var wire 1 0 nmi $end
$var wire 1 K isAddressing $end
$var wire 6 L instructionCode [5:0] $end
$var wire 1 2 getInstructionPreInjection $end
$var wire 1 3 getInstructionPostInjection $end
$var wire 1 4 free_carry $end
$var wire 4 M addressingCode [3:0] $end
$var reg 1 N IS_STORE_ACC_INSTRUCT $end
$var reg 1 O IS_STORE_X_INSTRUCT $end
$var reg 1 P IS_STORE_Y_INSTRUCT $end
$var reg 128 Q outflags [127:0] $end
$var reg 1 R passAddressing $end
$scope module state_machine $end
$var wire 1 & clk $end
$var wire 4 S decodedAddress [3:0] $end
$var wire 6 T decodedInstruction [5:0] $end
$var wire 1 U endAddressing $end
$var wire 1 R noAddressing $end
$var wire 1 * nrst $end
$var wire 1 3 getInstruction $end
$var reg 4 V currentAddress [3:0] $end
$var reg 6 W currentInstruction [5:0] $end
$var reg 1 K mode $end
$var reg 4 X nextAddress [3:0] $end
$var reg 6 Y nextInstruction [5:0] $end
$var reg 1 Z nextMode $end
$var reg 3 [ nextTime [2:0] $end
$var reg 3 \ timeState [2:0] $end
$scope begin comb_OPCode $end
$upscope $end
$scope begin comb_timingGeneration $end
$upscope $end
$scope begin ff_OPCode $end
$upscope $end
$scope begin ff_timingGeneration_mode $end
$upscope $end
$scope begin ff_timingGeneration_timeState $end
$upscope $end
$upscope $end
$scope begin blockName $end
$upscope $end
$upscope $end
$scope module free_carry_ff $end
$var wire 1 & clk $end
$var wire 1 ] en $end
$var wire 1 * nrst $end
$var wire 1 7 ALUcarry $end
$var reg 1 4 freeCarry $end
$var reg 1 ^ freeCarryNext $end
$scope begin comb_free_carry_ff $end
$upscope $end
$scope begin ff_free_carry_ff $end
$upscope $end
$upscope $end
$scope module instructionLoader $end
$var wire 1 & clk $end
$var wire 1 - enableIFlag $end
$var wire 8 _ externalDB [7:0] $end
$var wire 1 ( interruptRequest $end
$var wire 1 2 loadNextInstruction $end
$var wire 1 ) nonMaskableInterrupt $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 . resetRunning $end
$var wire 1 a resetDetected $end
$var wire 1 0 nmiRunning $end
$var wire 1 b nmiGenerated $end
$var wire 1 c irqGenerated $end
$var reg 1 3 instructionRegReadEnable $end
$var reg 8 d nextInstruction [7:0] $end
$scope module interruptInjector $end
$var wire 1 & clk $end
$var wire 1 3 interruptAcknowleged $end
$var wire 1 ( interruptRequest $end
$var wire 1 ) nonMaskableInterrupt $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 e synchronizedNMI $end
$var wire 1 f synchronizedIRQ $end
$var wire 1 . resetRunning $end
$var wire 1 a resetDetected $end
$var wire 1 0 nmiRunning $end
$var wire 1 b nmiGenerated $end
$var wire 1 c irqGenerated $end
$scope module irqGeneratedFF $end
$var wire 1 & clk $end
$var wire 1 3 interruptAcknowleged $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 f synchronizedIRQ $end
$var reg 1 c irqGenerated $end
$var reg 1 g nextIRQGenerated $end
$scope begin IRQNextStateLogic $end
$upscope $end
$scope begin nmiAssignment $end
$upscope $end
$upscope $end
$scope module irqSync $end
$var wire 1 & clk $end
$var wire 1 ( in $end
$var wire 1 * nrst $end
$var reg 1 h nextQ1 $end
$var reg 1 i nextQ2 $end
$var reg 1 f out $end
$var reg 1 j q1 $end
$var reg 1 k q2 $end
$scope begin nextStateAssignment $end
$upscope $end
$scope begin nextStateLogic $end
$upscope $end
$scope begin outputLogic $end
$upscope $end
$upscope $end
$scope module nmiGeneratedFF $end
$var wire 1 & clk $end
$var wire 1 3 interruptAcknowleged $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 e synchronizedNMI $end
$var wire 1 0 nmiRunning $end
$var reg 1 l nextNMIGenerated $end
$var reg 1 b nmiGenerated $end
$scope begin NMInextStateLogic $end
$upscope $end
$scope begin nmiAssignment $end
$upscope $end
$upscope $end
$scope module nmiRunningFF $end
$var wire 1 & clk $end
$var wire 1 3 interruptAcknowleged $end
$var wire 1 b nmiGenerated $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 e synchronizedNMI $end
$var reg 1 m nextNMIRunning $end
$var reg 1 0 nmiRunning $end
$scope begin NMInextStateLogic $end
$upscope $end
$scope begin nmiAssignment $end
$upscope $end
$upscope $end
$scope module nmiSync $end
$var wire 1 & clk $end
$var wire 1 ) in $end
$var wire 1 * nrst $end
$var reg 1 n nextQ1 $end
$var reg 1 o nextQ2 $end
$var reg 1 e out $end
$var reg 1 p q1 $end
$var reg 1 q q2 $end
$scope begin nextStateAssignment $end
$upscope $end
$scope begin nextStateLogic $end
$upscope $end
$scope begin outputLogic $end
$upscope $end
$upscope $end
$scope module resetDetector $end
$var wire 1 & clk $end
$var wire 1 r nextState $end
$var wire 1 * nrst $end
$var reg 1 a resetInection $end
$var reg 1 s state $end
$scope begin nextStateAssignment $end
$upscope $end
$scope begin outputLogic $end
$upscope $end
$upscope $end
$scope module resetRunningFF $end
$var wire 1 & clk $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 a resetInitiated $end
$var reg 1 t nextResetRunning $end
$var reg 1 . resetRunning $end
$scope begin nmiAssignment $end
$upscope $end
$scope begin resetRunningNextStateLogic $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module internalDataflow $end
$var wire 1 u adhPresetWriteEnable $end
$var wire 1 v adlPresetWriteEnable $end
$var wire 1 & clk $end
$var wire 8 w externalAddressBusHighOutput [7:0] $end
$var wire 8 x externalAddressBusLowOutput [7:0] $end
$var wire 8 y externalDBRead [7:0] $end
$var wire 8 z externalDBWrite [7:0] $end
$var wire 128 { flags [127:0] $end
$var wire 1 * nrst $end
$var wire 8 | yRegToSB [7:0] $end
$var wire 8 } xRegToSB [7:0] $end
$var wire 8 ~ stackPointerRegToSB [7:0] $end
$var wire 8 !" stackPointerRegToADL [7:0] $end
$var wire 8 "" stackBusDisconnected [7:0] $end
$var wire 8 #" stackBus [7:0] $end
$var wire 1 $" sbPresetWriteEnable $end
$var wire 8 %" sbPresetOutput [7:0] $end
$var wire 8 &" psrRegToLogicController [7:0] $end
$var wire 8 '" psrRegToDB [7:0] $end
$var wire 8 (" pclRegToPcIncrementer [7:0] $end
$var wire 8 )" pclRegToDB [7:0] $end
$var wire 8 *" pclRegToADL [7:0] $end
$var wire 8 +" pchRegToPcIncrementer [7:0] $end
$var wire 8 ," pchRegToDB [7:0] $end
$var wire 8 -" pchRegToADH [7:0] $end
$var wire 8 ." pcIncrementerToPclReg [7:0] $end
$var wire 8 /" pcIncrementerToPchReg [7:0] $end
$var wire 8 0" dorRegToExternalDB [7:0] $end
$var wire 1 1" dbPresetWriteEnable $end
$var wire 8 2" dbPresetOutput [7:0] $end
$var wire 8 3" dataToDB [7:0] $end
$var wire 8 4" dataToADL [7:0] $end
$var wire 8 5" dataToADH [7:0] $end
$var wire 8 6" dataBusDisconnected [7:0] $end
$var wire 8 7" dataBus [7:0] $end
$var wire 8 8" aluRegToSB [7:0] $end
$var wire 8 9" aluRegToADL [7:0] $end
$var wire 1 :" aluOverflowOut $end
$var wire 8 ;" aluOutput [7:0] $end
$var wire 1 7 aluCarryOut $end
$var wire 8 <" adlPresetOutput [7:0] $end
$var wire 8 =" adlADHIncrementerToPclReg [7:0] $end
$var wire 8 >" adlADHIncrementerToPchReg [7:0] $end
$var wire 8 ?" adhPresetOutput [7:0] $end
$var wire 8 @" addressLowBus [7:0] $end
$var wire 8 A" addressHighBusDisconnected [7:0] $end
$var wire 8 B" addressHighBus [7:0] $end
$var wire 8 C" accRegToSB [7:0] $end
$var wire 8 D" accRegToDB [7:0] $end
$var wire 8 E" ablRegToExternalADL [7:0] $end
$var wire 8 F" abhRegToExternalADH [7:0] $end
$scope module abhRegister $end
$var wire 1 G" busReadEnable $end
$var wire 1 & clk $end
$var wire 8 H" muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 I" busSelectEncoded $end
$var wire 8 J" busOutputs [7:0] $end
$var wire 8 K" busInputs [7:0] $end
$var reg 8 L" currentState [7:0] $end
$var reg 8 M" nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 G" select $end
$var wire 1 I" encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 N" temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ablRegister $end
$var wire 1 O" busReadEnable $end
$var wire 1 & clk $end
$var wire 8 P" muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 Q" busSelectEncoded $end
$var wire 8 R" busOutputs [7:0] $end
$var wire 8 S" busInputs [7:0] $end
$var reg 8 T" currentState [7:0] $end
$var reg 8 U" nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 O" select $end
$var wire 1 Q" encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 V" temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module accumulatorRegister $end
$var wire 1 W" busReadEnable $end
$var wire 1 & clk $end
$var wire 8 X" muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 Y" busSelectEncoded $end
$var wire 16 Z" busOutputs [15:0] $end
$var wire 8 [" busInputs [7:0] $end
$var reg 8 \" currentState [7:0] $end
$var reg 8 ]" nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 W" select $end
$var wire 1 Y" encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 ^" temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module addressHighBusModule $end
$var wire 24 _" busInputs [23:0] $end
$var wire 8 `" busOutput [7:0] $end
$var wire 3 a" busSelect [2:0] $end
$var wire 2 b" busSelectEncoded [1:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope module encoder $end
$var wire 3 c" select [2:0] $end
$var wire 2 d" encodedSelect [1:0] $end
$scope begin genblk1[0] $end
$var wire 3 e" temp [2:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 3 f" temp [2:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module addressLowBusModule $end
$var wire 40 g" busInputs [39:0] $end
$var wire 8 h" busOutput [7:0] $end
$var wire 5 i" busSelect [4:0] $end
$var wire 3 j" busSelectEncoded [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope module encoder $end
$var wire 5 k" select [4:0] $end
$var wire 3 l" encodedSelect [2:0] $end
$scope begin genblk1[0] $end
$var wire 5 m" temp [4:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 5 n" temp [4:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 5 o" temp [4:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module adhPreset $end
$var wire 1 p" set_00 $end
$var wire 1 q" set_01 $end
$var wire 1 r" set_FA $end
$var wire 1 s" set_FB $end
$var wire 1 t" set_FC $end
$var wire 1 u" set_FD $end
$var wire 1 v" set_FE $end
$var wire 1 w" set_FF $end
$var reg 8 x" bus_out [7:0] $end
$upscope $end
$scope module adlADHIncrementor $end
$var wire 1 y" decrement $end
$var wire 1 z" increment $end
$var wire 8 {" input_lowbyte [7:0] $end
$var wire 8 |" output_lowbyte [7:0] $end
$var wire 8 }" output_highbyte [7:0] $end
$var wire 8 ~" input_highbyte [7:0] $end
$var wire 16 !# address [15:0] $end
$var reg 16 "# nextAddress [15:0] $end
$upscope $end
$scope module adlPreset $end
$var wire 1 ## set_00 $end
$var wire 1 $# set_01 $end
$var wire 1 %# set_FA $end
$var wire 1 &# set_FB $end
$var wire 1 '# set_FC $end
$var wire 1 (# set_FD $end
$var wire 1 )# set_FE $end
$var wire 1 *# set_FF $end
$var reg 8 +# bus_out [7:0] $end
$upscope $end
$scope module alu $end
$var wire 8 ,# ADL_input [7:0] $end
$var wire 1 -# carry_in $end
$var wire 1 .# e_and $end
$var wire 1 /# e_eor $end
$var wire 1 0# e_or $end
$var wire 1 1# e_shiftr $end
$var wire 1 2# e_sum $end
$var wire 1 3# enable_dec $end
$var wire 1 4# lda_sb $end
$var wire 1 5# lda_zero $end
$var wire 1 6# ldb_adl $end
$var wire 1 7# ldb_db $end
$var wire 1 8# ldb_inv_db $end
$var wire 1 :" overflow $end
$var wire 1 9# sum_carry_out $end
$var wire 8 :# sum [7:0] $end
$var wire 8 ;# SB_input [7:0] $end
$var wire 8 <# DB_input [7:0] $end
$var reg 8 =# a [7:0] $end
$var reg 8 ># alu_out [7:0] $end
$var reg 8 ?# b [7:0] $end
$var reg 8 @# bcd_buffer [7:0] $end
$var reg 1 7 carry_out $end
$var reg 4 A# hi_nib [3:0] $end
$var reg 4 B# lo_nib [3:0] $end
$var reg 7 C# rot_buffer [6:0] $end
$upscope $end
$scope module aluRegister $end
$var wire 8 D# busInputs [7:0] $end
$var wire 1 E# busReadEnable $end
$var wire 1 & clk $end
$var wire 8 F# muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 G# busSelectEncoded $end
$var wire 16 H# busOutputs [15:0] $end
$var reg 8 I# currentState [7:0] $end
$var reg 8 J# nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 E# select $end
$var wire 1 G# encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 K# temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module bridge $end
$var wire 8 L# bus3Input [7:0] $end
$var wire 1 M# open1To2 $end
$var wire 1 N# open2To1 $end
$var wire 1 O# open2To3 $end
$var wire 1 P# open3To2 $end
$var wire 8 Q# bus2Input [7:0] $end
$var wire 8 R# bus1Input [7:0] $end
$var reg 8 S# bus1Output [7:0] $end
$var reg 8 T# bus2Output [7:0] $end
$var reg 8 U# bus3Output [7:0] $end
$upscope $end
$scope module dataBusModule $end
$var wire 48 V# busInputs [47:0] $end
$var wire 8 W# busOutput [7:0] $end
$var wire 6 X# busSelect [5:0] $end
$var wire 3 Y# busSelectEncoded [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope module encoder $end
$var wire 6 Z# select [5:0] $end
$var wire 3 [# encodedSelect [2:0] $end
$scope begin genblk1[0] $end
$var wire 6 \# temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 6 ]# temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 6 ^# temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module dbPreset $end
$var wire 1 _# set_00 $end
$var wire 1 `# set_01 $end
$var wire 1 a# set_FA $end
$var wire 1 b# set_FB $end
$var wire 1 c# set_FC $end
$var wire 1 d# set_FD $end
$var wire 1 e# set_FE $end
$var wire 1 f# set_FF $end
$var reg 8 g# bus_out [7:0] $end
$upscope $end
$scope module dorRegister $end
$var wire 8 h# busInputs [7:0] $end
$var wire 1 i# busReadEnable $end
$var wire 1 & clk $end
$var wire 8 j# muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 k# busSelectEncoded $end
$var wire 8 l# busOutputs [7:0] $end
$var reg 8 m# currentState [7:0] $end
$var reg 8 n# nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 i# select $end
$var wire 1 k# encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 o# temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module externalDBToADH $end
$var wire 1 p# enable $end
$var wire 8 q# interfaceInput [7:0] $end
$var reg 8 r# interfaceOutput [7:0] $end
$upscope $end
$scope module externalDBToADL $end
$var wire 1 s# enable $end
$var wire 8 t# interfaceInput [7:0] $end
$var reg 8 u# interfaceOutput [7:0] $end
$upscope $end
$scope module externalDBToDB $end
$var wire 1 v# enable $end
$var wire 8 w# interfaceInput [7:0] $end
$var reg 8 x# interfaceOutput [7:0] $end
$upscope $end
$scope module pcIncrementor $end
$var wire 1 y# decrement $end
$var wire 1 z# increment $end
$var wire 8 {# input_highbyte [7:0] $end
$var wire 8 |# input_lowbyte [7:0] $end
$var wire 8 }# output_lowbyte [7:0] $end
$var wire 8 ~# output_highbyte [7:0] $end
$var wire 16 !$ address [15:0] $end
$var reg 16 "$ nextAddress [15:0] $end
$upscope $end
$scope module pchRegister $end
$var wire 16 #$ busInputs [15:0] $end
$var wire 2 $$ busReadEnable [1:0] $end
$var wire 1 & clk $end
$var wire 8 %$ muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 &$ busSelectEncoded $end
$var wire 24 '$ busOutputs [23:0] $end
$var reg 8 ($ currentState [7:0] $end
$var reg 8 )$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope module encoder $end
$var wire 2 *$ select [1:0] $end
$var wire 1 &$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 2 +$ temp [1:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pclRegister $end
$var wire 16 ,$ busInputs [15:0] $end
$var wire 2 -$ busReadEnable [1:0] $end
$var wire 1 & clk $end
$var wire 8 .$ muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 /$ busSelectEncoded $end
$var wire 24 0$ busOutputs [23:0] $end
$var reg 8 1$ currentState [7:0] $end
$var reg 8 2$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope module encoder $end
$var wire 2 3$ select [1:0] $end
$var wire 1 /$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 2 4$ temp [1:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module psr $end
$var wire 1 5$ DB0_C $end
$var wire 1 6$ DB1_Z $end
$var wire 1 7$ DB2_I $end
$var wire 1 8$ DB3_D $end
$var wire 1 9$ DB6_V $end
$var wire 1 :$ DB7_N $end
$var wire 8 ;$ DB_in [7:0] $end
$var wire 1 <$ DBall_Z $end
$var wire 8 =$ PSR_RCL [7:0] $end
$var wire 1 >$ break_set $end
$var wire 1 7 carry $end
$var wire 1 ?$ carry_C $end
$var wire 1 & clk $end
$var wire 1 @$ enableDBWrite $end
$var wire 1 A$ manual_C $end
$var wire 1 B$ manual_D $end
$var wire 1 C$ manual_I $end
$var wire 1 D$ manual_set $end
$var wire 1 * nrst $end
$var wire 1 :" overflow $end
$var wire 1 E$ overflow_V $end
$var wire 1 F$ rcl_V $end
$var wire 8 G$ internalFFOutput [7:0] $end
$var wire 8 H$ internalFFInput [7:0] $end
$var wire 8 I$ PSR_DB [7:0] $end
$scope module inputInterface $end
$var wire 1 J$ enable $end
$var wire 8 K$ interfaceInput [7:0] $end
$var reg 8 L$ interfaceOutput [7:0] $end
$upscope $end
$scope module outputInterface $end
$var wire 1 @$ enable $end
$var wire 8 M$ interfaceInput [7:0] $end
$var reg 8 N$ interfaceOutput [7:0] $end
$upscope $end
$scope module processStatusReg $end
$var wire 1 5$ DB0_C $end
$var wire 1 6$ DB1_Z $end
$var wire 1 7$ DB2_I $end
$var wire 1 8$ DB3_D $end
$var wire 1 9$ DB6_V $end
$var wire 1 :$ DB7_N $end
$var wire 8 O$ DB_in [7:0] $end
$var wire 1 <$ DBall_Z $end
$var wire 1 >$ break_set $end
$var wire 1 7 carry $end
$var wire 1 ?$ carry_C $end
$var wire 1 & clk $end
$var wire 1 A$ manual_C $end
$var wire 1 B$ manual_D $end
$var wire 1 C$ manual_I $end
$var wire 1 D$ manual_set $end
$var wire 1 * nrst $end
$var wire 1 :" overflow $end
$var wire 1 E$ overflow_V $end
$var wire 1 F$ rcl_V $end
$var wire 8 P$ stat_buf_nxt [7:0] $end
$var wire 8 Q$ PSR_Output [7:0] $end
$var reg 8 R$ status_buffer [7:0] $end
$upscope $end
$upscope $end
$scope module sbPreset $end
$var wire 1 S$ set_00 $end
$var wire 1 T$ set_01 $end
$var wire 1 U$ set_FA $end
$var wire 1 V$ set_FB $end
$var wire 1 W$ set_FC $end
$var wire 1 X$ set_FD $end
$var wire 1 Y$ set_FE $end
$var wire 1 Z$ set_FF $end
$var reg 8 [$ bus_out [7:0] $end
$upscope $end
$scope module stackBusModule $end
$var wire 48 \$ busInputs [47:0] $end
$var wire 8 ]$ busOutput [7:0] $end
$var wire 6 ^$ busSelect [5:0] $end
$var wire 3 _$ busSelectEncoded [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope module encoder $end
$var wire 6 `$ select [5:0] $end
$var wire 3 a$ encodedSelect [2:0] $end
$scope begin genblk1[0] $end
$var wire 6 b$ temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 6 c$ temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 6 d$ temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module stackPointerRegister $end
$var wire 8 e$ busInputs [7:0] $end
$var wire 1 f$ busReadEnable $end
$var wire 1 & clk $end
$var wire 8 g$ muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 h$ busSelectEncoded $end
$var wire 16 i$ busOutputs [15:0] $end
$var reg 8 j$ currentState [7:0] $end
$var reg 8 k$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 f$ select $end
$var wire 1 h$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 l$ temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module xRegister $end
$var wire 8 m$ busInputs [7:0] $end
$var wire 1 n$ busReadEnable $end
$var wire 1 & clk $end
$var wire 8 o$ muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 p$ busSelectEncoded $end
$var wire 8 q$ busOutputs [7:0] $end
$var reg 8 r$ currentState [7:0] $end
$var reg 8 s$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 n$ select $end
$var wire 1 p$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 t$ temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module yRegister $end
$var wire 8 u$ busInputs [7:0] $end
$var wire 1 v$ busReadEnable $end
$var wire 1 & clk $end
$var wire 8 w$ muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 x$ busSelectEncoded $end
$var wire 8 y$ busOutputs [7:0] $end
$var reg 8 z$ currentState [7:0] $end
$var reg 8 {$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 v$ select $end
$var wire 1 x$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 |$ temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope task reset_dut $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0|$
b0 {$
b0 z$
b0 y$
0x$
b0 w$
0v$
b0 u$
0t$
b0 s$
b0 r$
b0 q$
0p$
b0 o$
0n$
b0 m$
0l$
b0 k$
b0 j$
b0 i$
0h$
b0 g$
0f$
b0 e$
b0 d$
b0 c$
b0 b$
b0 a$
b0 `$
b0 _$
b0 ^$
b0 ]$
b0 \$
b0 [$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
b0 R$
b0 Q$
b0zz0100 P$
b0 O$
b0 N$
b0 M$
b0 L$
b0 K$
1J$
b0 I$
b0 H$
b0 G$
0F$
0E$
1D$
1C$
0B$
0A$
0@$
0?$
0>$
b0 =$
0<$
b0 ;$
0:$
09$
08$
07$
06$
05$
b10 4$
b10 3$
b10111011 2$
b10111011 1$
b101110111011101110111011 0$
1/$
b10111011 .$
b10 -$
b1011101100000000 ,$
b10 +$
b10 *$
b10101010 )$
b10101010 ($
b101010101010101010101010 '$
1&$
b10101010 %$
b10 $$
b1010101000000000 #$
b1010101010111011 "$
b1010101010111011 !$
b10101010 ~#
b10111011 }#
b10111011 |#
b10101010 {#
0z#
0y#
b0 x#
bx w#
0v#
b0 u#
bx t#
0s#
b0 r#
bx q#
0p#
0o#
b0 n#
b0 m#
b0 l#
0k#
b0 j#
0i#
b0 h#
b0 g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
b0 ^#
b0 ]#
b0 \#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b101010101011101100000000xxxxxxxx00000000 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
0P#
0O#
0N#
0M#
b0 L#
0K#
b0 J#
b0 I#
b0 H#
0G#
b0 F#
0E#
b0 D#
b0 C#
b0 B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
b0 ,#
b0 +#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
0z"
0y"
b0 x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b10111011xxxxxxxx00000000 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b10101010xxxxxxxx00000000 _"
0^"
b0 ]"
b0 \"
b0 ["
b0 Z"
0Y"
b0 X"
0W"
0V"
b0 U"
b0 T"
b0 S"
b0 R"
0Q"
b0 P"
0O"
0N"
b0 M"
b0 L"
b0 K"
b0 J"
0I"
b0 H"
0G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
0:"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
01"
b0 0"
b10101010 /"
b10111011 ."
b10101010 -"
b10101010 ,"
b10101010 +"
b10111011 *"
b10111011 )"
b10111011 ("
b0 '"
b0 &"
b0 %"
0$"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b100100000000000000000000000000000000000000 {
b0 z
bx y
b0 x
b0 w
0v
0u
1t
1s
0r
0q
0p
0o
xn
0m
0l
0k
0j
0i
xh
0g
0f
0e
b0 d
0c
0b
1a
0`
bx _
0^
0]
b0 \
b0 [
0Z
b1011 Y
b101 X
b0 W
b0 V
0U
b1011 T
b101 S
1R
b100100000000000000000000000000000000000000 Q
0P
0O
0N
b0 M
b0 L
1K
b0 J
b1011 I
b101 H
0G
0F
0E
0D
0C
0B
b1011 A
b101 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b101 8
07
b0 6
b100100000000000000000000000000000000000000 5
04
13
02
b1011 1
00
b0 /
0.
1-
bx ,
b101001001100101011100110110010101110100 +
0*
x)
x(
bx '
0&
bx %
bx $
b0 #
b0 "
b0 !
$end
#100
1&
#200
0&
#300
1&
#400
1*
0&
#500
1:"
b11111111 J#
b1010101000000001 #$
b1 >"
b1 }"
b11111111 F#
b11111111 ;"
b11111111 >#
b11111111 D#
b11111111 :#
b100000000 "#
b1 M"
b10101010 n#
b11111111 =#
b10101010 H$
b10101010 L$
b100000000 !#
b1 H"
b1 B"
b1 K"
b1 ~"
b1 U#
b11111111 g$
b11111111 o$
b11111111 w$
b11111111 X"
b11111111 #"
b11111111 ["
b11111111 ;#
b11111111 T#
b11111111 e$
b11111111 m$
b11111111 u$
b10101010 j#
b10101010 7"
b10101010 <#
b10101010 S#
b10101010 h#
b10101010 ;$
b10101010 K$
b10101010 O$
b10101010 6"
b10101010 R#
b10101010 W#
b100 Y#
b100 [#
b10000 ^#
b11111111 ""
b11111111 Q#
b11111111 ]$
b100 j"
b100 l"
b10000 o"
b1 A"
b1 `"
b1 L#
b10 8
b10 @
b10 H
b10 S
b11001 1
b11001 A
b11001 I
b11001 T
0D$
0C$
b11111111 \$
b11111111 %"
b11111111 [$
b10101010xxxxxxxx00000001 _"
b1 ?"
b1 x"
b1 a"
b1 c"
1u
b1 [
bx =
bx >
bx ?
1i#
b10000 X#
b10000 Z#
1E#
12#
16#
14#
1Z$
b1 ^$
b1 `$
1$"
1O"
b10000 i"
b10000 k"
1G"
1q"
03
bx /
bx <
bx d
0-
1`
0Z
b100000010000000010000000010000000110000000000000000000100001000010000000001100 5
b100000010000000010000000010000000110000000000000000000100001000010000000001100 Q
b100000010000000010000000010000000110000000000000000000100001000010000000001100 {
1t
0a
xi
xo
b100 9
b100 &"
b100 =$
b100 G$
b100 M$
b100 Q$
b101 M
b101 V
b1011 L
b1011 W
0K
1.
0s
xj
xp
b0zz0100 R$
1&
#600
0&
#700
0:"
17
b11111110 J#
b1011101111111111 ,$
b11111111 ="
b11111111 |"
b1010101000000000 #$
b0 >"
b0 }"
19#
b11111110 F#
b11111110 ;"
b11111110 >#
b11111110 D#
b11111110 :#
b10111011 n#
b10111011 H$
b10111011 L$
b11111111 "#
b11111111 U"
b11111111 ?#
b11111111 =#
b0 H"
b0 B"
b0 K"
b0 ~"
b0 U#
b10111011 j#
b10111011 7"
b10111011 <#
b10111011 S#
b10111011 h#
b10111011 ;$
b10111011 K$
b10111011 O$
b1000 \#
b1000 ]#
b1000 m"
b11111111 !#
b11111111 P"
b11111111 @"
b11111111 S"
b11111111 h"
b11111111 {"
b11111111 ,#
b1000 n"
b10111011 6"
b10111011 R#
b10111011 W#
b11 Y#
b11 [#
b0 ^#
b11 j"
b11 l"
b0 o"
b0 A"
b0 `"
b0 L#
b10101010xxxxxxxx00000000 _"
b0 ?"
b0 x"
b0 a"
b0 c"
0u
b1000 X#
b1000 Z#
b1000 i"
b1000 k"
0G"
0q"
xl
b10 [
b10000000000010000000010000000010000000000000000000100001000010100000000100 5
b10000000000010000000010000000010000000000000000000100001000010100000000100 Q
b10000000000010000000010000000010000000000000000000100001000010100000000100 {
xf
xe
b111111110000000011111111 \$
b11111111 8"
b1111111110111011xxxxxxxx00000000 g"
b11111111 9"
b1 J
b1 \
xk
xq
b1 #
b1 ;
b1 w
b1 F"
b1 J"
b1 L"
b1111111111111111 H#
b11111111 I#
b10101010 !
b10101010 6
b10101010 z
b10101010 0"
b10101010 l#
b10101010 m#
1&
#800
0&
#900
b100 n#
b100 H$
b100 L$
b100 j#
b100 7"
b100 <#
b100 S#
b100 h#
b100 ;$
b100 K$
b100 O$
b11111101 J#
b100000 ^#
b100000 \#
b100 6"
b100 R#
b100 W#
b101 Y#
b101 [#
b0 ]#
b1011101111111110 ,$
b11111110 ="
b11111110 |"
17
b11111101 F#
b11111101 ;"
b11111101 >#
b11111101 D#
b11111101 :#
b100101010101011101100000000xxxxxxxx00000000 V#
b100 '"
b100 I$
b100 N$
b11111110 "#
b11111110 U"
b11111110 ?#
b11111111 =#
1@$
b100000 X#
b100000 Z#
b11111110 !#
b11111110 P"
b11111110 @"
b11111110 S"
b11111110 h"
b11111110 {"
b11111110 ,#
b11 [
b100000000010000000010000000010000000000000000000100001000010100000000100 5
b100000000010000000010000000010000000000000000000100001000010100000000100 Q
b100000000010000000010000000010000000000000000000100001000010100000000100 {
b111111100000000011111111 \$
b11111110 8"
b1111111010111011xxxxxxxx00000000 g"
b11111110 9"
b10 J
b10 \
xb
b10111011 !
b10111011 6
b10111011 z
b10111011 0"
b10111011 l#
b10111011 m#
b1111111011111110 H#
b11111110 I#
b11111111 "
b11111111 :
b11111111 x
b11111111 E"
b11111111 R"
b11111111 T"
1&
#1000
0&
#1100
b0 g$
b0 o$
b0 w$
b0 X"
b0 #"
b0 ["
b0 ;#
b0 T#
b0 e$
b0 m$
b0 u$
0:"
b0 H$
b0 L$
b0 \#
b0 Y#
b0 [#
b0 ^#
b0 m"
b0 j"
b0 l"
b0 n"
b0 ""
b0 Q#
b0 ]$
b101 8
b101 @
b101 H
b101 S
b1011 1
b1011 A
b1011 I
b1011 T
1D$
1C$
b1011101100000000 ,$
b0 ="
b0 |"
b0 :#
09#
b0 j#
b0 7"
b0 <#
b0 S#
b0 h#
b0 ;$
b0 K$
b0 O$
b0 J#
b0 n#
07
b0 F#
b0 ;"
b0 >#
b0 D#
b0 %"
b0 [$
b0 =
b0 >
b0 ?
b0 "#
b0 U"
b0 ?#
b0 =#
b0zz0100 P$
b0 6"
b0 R#
b0 W#
b0 X#
b0 Z#
b0 i"
b0 k"
0O"
0E#
0i#
06#
04#
02#
0@$
0Z$
b0 ^$
b0 `$
0$"
b0 /
b0 <
b0 d
13
1-
b0 !#
b0 P"
b0 @"
b0 S"
b0 h"
b0 {"
b0 ,#
0`
b101010101011101100000000xxxxxxxx00000000 V#
b0 '"
b0 I$
b0 N$
b101 X
b1011 Y
b0 [
b100100000000000000000000000000000000000000 5
b100100000000000000000000000000000000000000 Q
b100100000000000000000000000000000000000000 {
1a
0l
0f
0i
0e
0o
b0 M"
b0 \$
b0 8"
b10111011xxxxxxxx00000000 g"
b0 9"
b0 9
b0 &"
b0 =$
b0 G$
b0 M$
b0 Q$
b0 M
b0 V
b0 L
b0 W
b0 J
b0 \
1K
0.
1s
0b
0k
0j
0q
0p
b0 #
b0 ;
b0 w
b0 F"
b0 J"
b0 L"
b0 "
b0 :
b0 x
b0 E"
b0 R"
b0 T"
b0 H#
b0 I#
b0 !
b0 6
b0 z
b0 0"
b0 l#
b0 m#
b0 R$
0*
b1000010011011110110111101110100001000000101010101110000001000000111001101100101011100010111010101100101011011100110001101100101001000000101001001100101011100110110010101110100 +
1&
#1200
0&
#1300
1&
#1400
0&
#1500
1&
#1600
1*
0&
#1700
1:"
b11111111 J#
b1010101000000001 #$
b1 >"
b1 }"
b11111111 F#
b11111111 ;"
b11111111 >#
b11111111 D#
b11111111 :#
b100000000 "#
b1 M"
b10101010 n#
b11111111 =#
b10101010 H$
b10101010 L$
b100000000 !#
b1 H"
b1 B"
b1 K"
b1 ~"
b1 U#
b11111111 g$
b11111111 o$
b11111111 w$
b11111111 X"
b11111111 #"
b11111111 ["
b11111111 ;#
b11111111 T#
b11111111 e$
b11111111 m$
b11111111 u$
b10101010 j#
b10101010 7"
b10101010 <#
b10101010 S#
b10101010 h#
b10101010 ;$
b10101010 K$
b10101010 O$
b10101010 6"
b10101010 R#
b10101010 W#
b100 Y#
b100 [#
b10000 ^#
b11111111 ""
b11111111 Q#
b11111111 ]$
b100 j"
b100 l"
b10000 o"
b1 A"
b1 `"
b1 L#
b10 8
b10 @
b10 H
b10 S
b11001 1
b11001 A
b11001 I
b11001 T
0D$
0C$
b11111111 \$
b11111111 %"
b11111111 [$
b10101010xxxxxxxx00000001 _"
b1 ?"
b1 x"
b1 a"
b1 c"
1u
b1 [
bx =
bx >
bx ?
1i#
b10000 X#
b10000 Z#
1E#
12#
16#
14#
1Z$
b1 ^$
b1 `$
1$"
1O"
b10000 i"
b10000 k"
1G"
1q"
03
bx /
bx <
bx d
0-
1`
0Z
b100000010000000010000000010000000110000000000000000000100001000010000000001100 5
b100000010000000010000000010000000110000000000000000000100001000010000000001100 Q
b100000010000000010000000010000000110000000000000000000100001000010000000001100 {
1t
0a
xi
xo
b100 9
b100 &"
b100 =$
b100 G$
b100 M$
b100 Q$
b101 M
b101 V
b1011 L
b1011 W
0K
1.
0s
xj
xp
b0zz0100 R$
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110001 +
1&
#1800
0&
#1900
0:"
17
b11111110 J#
b1011101111111111 ,$
b11111111 ="
b11111111 |"
b1010101000000000 #$
b0 >"
b0 }"
19#
b11111110 F#
b11111110 ;"
b11111110 >#
b11111110 D#
b11111110 :#
b10111011 n#
b10111011 H$
b10111011 L$
b11111111 "#
b11111111 U"
b11111111 ?#
b11111111 =#
b0 H"
b0 B"
b0 K"
b0 ~"
b0 U#
b10111011 j#
b10111011 7"
b10111011 <#
b10111011 S#
b10111011 h#
b10111011 ;$
b10111011 K$
b10111011 O$
b1000 \#
b1000 ]#
b1000 m"
b11111111 !#
b11111111 P"
b11111111 @"
b11111111 S"
b11111111 h"
b11111111 {"
b11111111 ,#
b1000 n"
b10111011 6"
b10111011 R#
b10111011 W#
b11 Y#
b11 [#
b0 ^#
b11 j"
b11 l"
b0 o"
b0 A"
b0 `"
b0 L#
b10101010xxxxxxxx00000000 _"
b0 ?"
b0 x"
b0 a"
b0 c"
0u
b1000 X#
b1000 Z#
b1000 i"
b1000 k"
0G"
0q"
xl
b10 [
b10000000000010000000010000000010000000000000000000100001000010100000000100 5
b10000000000010000000010000000010000000000000000000100001000010100000000100 Q
b10000000000010000000010000000010000000000000000000100001000010100000000100 {
xf
xe
b111111110000000011111111 \$
b11111111 8"
b1111111110111011xxxxxxxx00000000 g"
b11111111 9"
b1 J
b1 \
xk
xq
b1 #
b1 ;
b1 w
b1 F"
b1 J"
b1 L"
b1111111111111111 H#
b11111111 I#
b10101010 !
b10101010 6
b10101010 z
b10101010 0"
b10101010 l#
b10101010 m#
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110010 +
1&
#2000
0&
#2100
b100 n#
b100 H$
b100 L$
b100 j#
b100 7"
b100 <#
b100 S#
b100 h#
b100 ;$
b100 K$
b100 O$
b11111101 J#
b100000 ^#
b100000 \#
b100 6"
b100 R#
b100 W#
b101 Y#
b101 [#
b0 ]#
b1011101111111110 ,$
b11111110 ="
b11111110 |"
17
b11111101 F#
b11111101 ;"
b11111101 >#
b11111101 D#
b11111101 :#
b100101010101011101100000000xxxxxxxx00000000 V#
b100 '"
b100 I$
b100 N$
b11111110 "#
b11111110 U"
b11111110 ?#
b11111111 =#
1@$
b100000 X#
b100000 Z#
b11111110 !#
b11111110 P"
b11111110 @"
b11111110 S"
b11111110 h"
b11111110 {"
b11111110 ,#
b11 [
b100000000010000000010000000010000000000000000000100001000010100000000100 5
b100000000010000000010000000010000000000000000000100001000010100000000100 Q
b100000000010000000010000000010000000000000000000100001000010100000000100 {
b111111100000000011111111 \$
b11111110 8"
b1111111010111011xxxxxxxx00000000 g"
b11111110 9"
b10 J
b10 \
xb
b10111011 !
b10111011 6
b10111011 z
b10111011 0"
b10111011 l#
b10111011 m#
b1111111011111110 H#
b11111110 I#
b11111111 "
b11111111 :
b11111111 x
b11111111 E"
b11111111 R"
b11111111 T"
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110011 +
1&
#2200
0&
#2300
1v
b1010101011111111 #$
b11111111 >"
b11111111 }"
b0 H$
b0 L$
b11111111 H"
b11111111 B"
b11111111 K"
b11111111 ~"
b11111111 U#
b11111101 g$
b11111101 o$
b11111101 w$
b11111101 X"
b11111101 #"
b11111101 ["
b11111101 ;#
b11111101 T#
b11111101 e$
b11111101 m$
b11111101 u$
b0 j#
b0 7"
b0 <#
b0 S#
b0 h#
b0 ;$
b0 K$
b0 O$
0:"
b10 _$
b10 a$
b100 c$
b11111111 A"
b11111111 `"
b11111111 L#
b1 a"
b1 c"
1u
b0 \#
b0 Y#
b0 [#
b0 ^#
b0 m"
b0 j"
b0 l"
b0 n"
b0 6"
b0 R#
b0 W#
b11111101 ""
b11111101 Q#
b11111101 ]$
b1011101111111100 ,$
b11111100 ="
b11111100 |"
b0 :#
09#
b11111101 k$
b11111100 <"
b11111100 +#
b11111111 M"
b10101010xxxxxxxx11111111 _"
b11111111 ?"
b11111111 x"
07
b0 F#
b0 ;"
b0 >#
b0 D#
b101010101011101100000000xxxxxxxx00000000 V#
b0 '"
b0 I$
b0 N$
b0 %"
b0 [$
b1111111111111100 "#
b11111100 U"
b0 ?#
b0 =#
1f$
1'#
1G"
1w"
b0 X#
b0 Z#
b1 i"
b1 k"
0E#
0i#
06#
04#
02#
0@$
0Z$
b100 ^$
b100 `$
0$"
b1111111111111100 !#
b11111100 P"
b11111100 @"
b11111100 S"
b11111100 h"
b11111100 {"
b11111100 ,#
b100 [
b1000100000000000000000000000000001000000000000000000100000000000001100 5
b1000100000000000000000000000000001000000000000000000100000000000001100 Q
b1000100000000000000000000000000001000000000000000000100000000000001100 {
b111111010000000000000000 \$
b11111101 8"
b1111110110111011xxxxxxxx11111100 g"
b11111101 9"
b11 J
b11 \
b11111110 "
b11111110 :
b11111110 x
b11111110 E"
b11111110 R"
b11111110 T"
b1111110111111101 H#
b11111101 I#
b100 !
b100 6
b100 z
b100 0"
b100 l#
b100 m#
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110100 +
1&
#2400
0&
#2500
x:"
x7
bx F#
bx ;"
bx >#
bx D#
bx :#
x9#
bx ?#
bx H$
bx L$
b1011101111111101 ,$
b11111101 ="
b11111101 |"
b1 i"
b1 k"
1v
b0 g$
b0 o$
b0 w$
b0 X"
b0 #"
b0 ["
b0 ;#
b0 T#
b0 e$
b0 m$
b0 u$
bx j#
bx 7"
bx <#
bx S#
bx h#
bx ;$
bx K$
bx O$
b1111111111111101 "#
b11111101 U"
bx 6"
bx R#
bx W#
b1 Y#
b1 [#
b10 \#
b0 ""
b0 Q#
b0 ]$
b0 _$
b0 a$
b0 c$
b1111111111111101 !#
b11111101 P"
b11111101 @"
b11111101 S"
b11111101 h"
b11111101 {"
b11111101 ,#
bx J#
bx 3"
bx x#
b11111101 <"
b11111101 +#
1E#
12#
15#
17#
b10 X#
b10 Z#
1v#
1(#
b0 ^$
b0 `$
0f$
0'#
b101 [
b1000010000000000000000000000000000000000000000100011000000001100001100 5
b1000010000000000000000000000000000000000000000100011000000001100001100 Q
b1000010000000000000000000000000000000000000000100011000000001100001100 {
b111111011111110110111011xxxxxxxx11111101 g"
b11111101 !"
b11111101111111010000000000000000 \$
b11111101 ~
b100 J
b100 \
b1111110111111101 i$
b11111101 j$
b11111100 "
b11111100 :
b11111100 x
b11111100 E"
b11111100 R"
b11111100 T"
b11111111 #
b11111111 ;
b11111111 w
b11111111 F"
b11111111 J"
b11111111 L"
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110101 +
1&
#2600
1:"
b11011101 J#
07
b11011101 F#
b11011101 ;"
b11011101 >#
b11011101 D#
b11011101 :#
09#
b10 8
b10 @
b10 H
b10 S
b10010 1
b10010 A
b10010 I
b10010 T
b11011101 ?#
b11011101 H$
b11011101 L$
b1 =
b111 >
b110 ?
b11011101 j#
b11011101 7"
b11011101 <#
b11011101 S#
b11011101 h#
b11011101 ;$
b11011101 K$
b11011101 O$
b11011101 /
b11011101 <
b11011101 d
b11011101 6"
b11011101 R#
b11011101 W#
b11011101 3"
b11011101 x#
b1010101010111011000000001101110100000000 V#
b1111110111111101101110111101110111111101 g"
b101010101101110111111111 _"
b11011101 '
b11011101 ,
b11011101 _
b11011101 y
b11011101 q#
b11011101 t#
b11011101 w#
0&
#2700
0v
b11011101 )$
b11011110 2$
0:"
b1010101011011101 #$
b11011101 >"
b11011101 }"
b11011101 M"
b0 H$
b0 L$
b11011101 %$
0&$
b0 +$
b11011110 .$
0/$
b0 4$
b11011101 U"
b11011101 H"
b11011101 B"
b11011101 K"
b11011101 ~"
b11011101 U#
b0 j#
b0 7"
b0 <#
b0 S#
b0 h#
b0 ;$
b0 K$
b0 O$
b10111100 ."
b10111100 }#
b1011110011011110 ,$
b11011110 ="
b11011110 |"
b1 b"
b1 d"
b10 e"
b1000 m"
b11 j"
b11 l"
b1000 n"
b0 6"
b0 R#
b0 W#
b0 Y#
b0 [#
b0 \#
b0 :#
b1101110111011101 !#
b11011101 P"
b11011101 @"
b11011101 S"
b11011101 h"
b11011101 {"
b11011101 ,#
b11011101 A"
b11011101 `"
b11011101 L#
0u
b1010101010111100 "$
b1101110111011110 "#
b11011101 5"
b11011101 r#
b0 ?#
b0 F#
b0 ;"
b0 >#
b0 D#
b0 <"
b0 +#
b101010101101110100000000 _"
b0 ?"
b0 x"
b0 3"
b0 x#
1z#
1z"
b1 $$
b1 *$
b1 -$
b1 3$
b10 a"
b10 c"
1p#
b1000 i"
b1000 k"
b0 X#
b0 Z#
0E#
07#
05#
02#
0(#
0w"
0v#
b110 [
b1000000000000000000000001000000000100000011100 5
b1000000000000000000000001000000000100000011100 Q
b1000000000000000000000001000000000100000011100 {
b11111101110111010000000000000000 \$
b11011101 8"
b1111110111011101101110111101110100000000 g"
b11011101 9"
b101 J
b101 \
b11111101 "
b11111101 :
b11111101 x
b11111101 E"
b11111101 R"
b11111101 T"
b1101110111011101 H#
b11011101 I#
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110110 +
1&
#2800
b11001100 )$
b11001100 %$
b1010101011001100 #$
b11001100 >"
b11001100 }"
b1 8
b1 @
b1 H
b1 S
b10100 1
b10100 A
b10100 I
b10100 T
b1100110011011110 "#
b11001100 M"
b0 =
b11 >
b1100110011011101 !#
b11001100 H"
b11001100 B"
b11001100 K"
b11001100 ~"
b11001100 U#
b11001100 /
b11001100 <
b11001100 d
b11001100 A"
b11001100 `"
b11001100 L#
b11001100 5"
b11001100 r#
b1010101010111011000000001100110000000000 V#
b1111110111011101101110111100110000000000 g"
b101010101100110000000000 _"
b11001100 '
b11001100 ,
b11001100 _
b11001100 y
b11001100 q#
b11001100 t#
b11001100 w#
0&
#2900
b11011111 ="
b11011111 |"
b11011111 2$
x-
b1100110011011111 "#
b11011110 U"
1&$
b10 +$
b11011111 .$
1/$
b10 4$
b1 X
b10100 Y
1Z
b100 f"
b0 m"
b1100110011011110 !#
b11011110 P"
b11011110 @"
b11011110 S"
b11011110 h"
b11011110 {"
b11011110 ,#
b10 j"
b10 l"
b100 n"
b11001100 A"
b11001100 `"
b11001100 L#
b10 b"
b10 d"
b0 e"
13
b0 5"
b0 r#
b1101111111011111 ,$
b11011111 ."
b11011111 }#
b1100110011001100 #$
b11001100 /"
b11001100 ~#
12
b100 i"
b100 k"
b100 a"
b100 c"
b10 $$
b10 *$
b10 -$
b10 3$
0p#
b1100110011011111 "$
b0 [
b10000000000000000000000000000000000000000000000000000000000000000000000000011011100 5
b10000000000000000000000000000000000000000000000000000000000000000000000000011011100 Q
b10000000000000000000000000000000000000000000000000000000000000000000000000011011100 {
b11011110 ("
b11011110 |#
b11011110 )"
b1111110111011101110111101100110000000000 g"
b11011110 *"
b1100110011011110 !$
b11001100 +"
b11001100 {#
b1100110011011110000000001100110000000000 V#
b11001100 ,"
b110011001100110000000000 _"
b11001100 -"
b110 J
b110 \
b110111101101111011011110 0$
b11011110 1$
b110011001100110011001100 '$
b11001100 ($
b11011101 "
b11011101 :
b11011101 x
b11011101 E"
b11011101 R"
b11011101 T"
b11001100 #
b11001100 ;
b11001100 w
b11001100 F"
b11001100 J"
b11001100 L"
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110111 +
1&
#3000
b1010 X
b11110 Y
b1010 8
b1010 @
b1010 H
b1010 S
b11110 1
b11110 A
b11110 I
b11110 T
b1 =
b1 >
b101 ?
b10100101 /
b10100101 <
b10100101 d
b1100110011011110000000001010010100000000 V#
b1111110111011101110111101010010100000000 g"
b110011001010010100000000 _"
b10100101 '
b10100101 ,
b10100101 _
b10100101 y
b10100101 q#
b10100101 t#
b10100101 w#
0&
#3100
b10100101 ="
b10100101 |"
b1100110000000000 #$
b0 >"
b0 }"
b0 M"
0-
b10100101 "#
b0 H"
b0 B"
b0 K"
b0 ~"
b0 U#
b11011111 2$
b10 m"
1u
b1 j"
b1 l"
b0 n"
b0 A"
b0 `"
b0 L#
b0 b"
b0 d"
b0 f"
b11011111 .$
0Z
b10100101 4"
b10100101 u#
03
b1101111110100101 ,$
b11011111 ."
b11011111 }#
b10100101 U"
1U
1s#
1p"
02
b10 i"
b10 k"
b1 a"
b1 c"
0z#
0z"
b1100110011011111 "$
b10100101 !#
b10100101 P"
b10100101 @"
b10100101 S"
b10100101 h"
b10100101 {"
b10100101 ,#
b1000000000000000000000000000000000000000000000000000000000000000000000000000001111 5
b1000000000000000000000000000000000000000000000000000000000000000000000000000001111 Q
b1000000000000000000000000000000000000000000000000000000000000000000000000000001111 {
0R
b1100110011011111 !$
b11011111 ("
b11011111 |#
b1100110011011111000000001010010100000000 V#
b11011111 )"
b1111110111011101110111111010010100000000 g"
b11011111 *"
b1010 M
b1010 V
b11110 L
b11110 W
b0 J
b0 \
1K
b11011110 "
b11011110 :
b11011110 x
b11011110 E"
b11011110 R"
b11011110 T"
b110111111101111111011111 0$
b11011111 1$
b0 $
b100110001000100010000010010110000100000010110100101000001000111 +
1&
#3200
b11 8
b11 @
b11 H
b11 S
b110000 1
b110000 A
b110000 I
b110000 T
b1101111110011001 ,$
b10011001 ="
b10011001 |"
b110 >
b100 ?
b10011001 "#
b10011001 U"
b10011001 /
b10011001 <
b10011001 d
b10011001 !#
b10011001 P"
b10011001 @"
b10011001 S"
b10011001 h"
b10011001 {"
b10011001 ,#
b10011001 4"
b10011001 u#
b1100110011011111000000001001100100000000 V#
b1111110111011101110111111001100100000000 g"
b110011001001100100000000 _"
b10011001 '
b10011001 ,
b10011001 _
b10011001 y
b10011001 q#
b10011001 t#
b10011001 w#
0&
#3300
b1100110011001100 #$
b11001100 >"
b11001100 }"
b10011001 ]"
b11001100 M"
b10011001 H$
b10011001 L$
b11100000 2$
b0zz0100 P$
b10011001 g$
b10011001 o$
b10011001 w$
b10011001 X"
b10011001 #"
b10011001 ["
b10011001 ;#
b10011001 T#
b10011001 e$
b10011001 m$
b10011001 u$
b11001100 H"
b11001100 B"
b11001100 K"
b11001100 ~"
b11001100 U#
b10011001 j#
b10011001 7"
b10011001 <#
b10011001 S#
b10011001 h#
b10011001 ;$
b10011001 K$
b10011001 O$
b11100000 .$
b11011111 U"
b10011001 6"
b10011001 R#
b10011001 W#
b1 Y#
b1 [#
b10 \#
b100 n"
b11001100 A"
b11001100 `"
b11001100 L#
b10 b"
b10 d"
b100 f"
b11100000 ."
b11100000 }#
b1110000011100000 ,$
b11100000 ="
b11100000 |"
b1100110011011111 !#
b11011111 P"
b11011111 @"
b11011111 S"
b11011111 h"
b11011111 {"
b11011111 ,#
b10 j"
b10 l"
b0 m"
0u
b10011001 3"
b10011001 x#
b1100110011100000 "$
b1100110011100000 "#
b1 [
b0 4"
b0 u#
1<$
1W"
1M#
b10 X#
b10 Z#
1v#
b100 a"
b100 c"
1z#
1z"
0U
b100 i"
b100 k"
0p"
0s#
b11000000000000000000001000000000000000010111011100 5
b11000000000000000000001000000000000000010111011100 Q
b11000000000000000000001000000000000000010111011100 {
0K
b10011001 "
b10011001 :
b10011001 x
b10011001 E"
b10011001 R"
b10011001 T"
b0 #
b0 ;
b0 w
b0 F"
b0 J"
b0 L"
b10011001 %
1&
#3400
b101 8
b101 @
b101 H
b101 S
b10111 1
b10111 A
b10111 I
b10111 T
b10001000 ]"
b10001000 H$
b10001000 L$
b0 =
b10 >
b10001000 g$
b10001000 o$
b10001000 w$
b10001000 X"
b10001000 #"
b10001000 ["
b10001000 ;#
b10001000 T#
b10001000 e$
b10001000 m$
b10001000 u$
b10001000 j#
b10001000 7"
b10001000 <#
b10001000 S#
b10001000 h#
b10001000 ;$
b10001000 K$
b10001000 O$
b10001000 /
b10001000 <
b10001000 d
b10001000 6"
b10001000 R#
b10001000 W#
b10001000 3"
b10001000 x#
b1100110011011111000000001000100000000000 V#
b1111110111011101110111111000100000000000 g"
b110011001000100000000000 _"
b10001000 '
b10001000 ,
b10001000 _
b10001000 y
b10001000 q#
b10001000 t#
b10001000 w#
0&
#3500
b0 H$
b0 L$
x-
b0 j#
b0 7"
b0 <#
b0 S#
b0 h#
b0 ;$
b0 K$
b0 O$
b11100001 2$
b101 X
b10111 Y
1Z
b0 6"
b0 R#
b0 W#
b0 Y#
b0 [#
b0 \#
b11100001 .$
b11100001 ="
b11100001 |"
13
b0 g$
b0 o$
b0 w$
b0 X"
b0 #"
b0 ["
b0 ;#
b0 T#
b0 e$
b0 m$
b0 u$
b0 3"
b0 x#
b1110000111100001 ,$
b11100001 ."
b11100001 }#
b1100110011100001 "#
b11100000 U"
12
0M#
b0 X#
b0 Z#
0W"
0<$
0v#
b1100110011100001 "$
b1100110011100000 !#
b11100000 P"
b11100000 @"
b11100000 S"
b11100000 h"
b11100000 {"
b11100000 ,#
b0 [
b10000000000000000000000000000000000000000000000000000000000000000000000000011011100 5
b10000000000000000000000000000000000000000000000000000000000000000000000000011011100 Q
b10000000000000000000000000000000000000000000000000000000000000000000000000011011100 {
b1100110011100000 !$
b11100000 ("
b11100000 |#
b11100000 )"
b1111110111011101111000001000100000000000 g"
b11100000 *"
b11111101110111011000100000000000 \$
b10001000 C"
b1100110011100000100010001000100000000000 V#
b10001000 D"
b1 J
b1 \
b11001100 #
b11001100 ;
b11001100 w
b11001100 F"
b11001100 J"
b11001100 L"
b11011111 "
b11011111 :
b11011111 x
b11011111 E"
b11011111 R"
b11011111 T"
b111000001110000011100000 0$
b11100000 1$
b1000100010001000 Z"
b10001000 \"
1&
#3600
0&
#3700
1:"
b0 ="
b0 |"
b1100110000000000 #$
b0 >"
b0 }"
b11111111 F#
b11111111 ;"
b11111111 >#
b11111111 D#
b11111111 :#
b11111111 H$
b11111111 L$
0-
b0 "#
b11111111 ?#
b0 H"
b0 B"
b0 K"
b0 ~"
b0 U#
b11111111 j#
b11111111 7"
b11111111 <#
b11111111 S#
b11111111 h#
b11111111 ;$
b11111111 K$
b11111111 O$
b11100001 2$
b100 _$
b100 a$
b10000 d$
b11111111 6"
b11111111 R#
b11111111 W#
b0 j"
b0 l"
b0 n"
b0 A"
b0 `"
b0 L#
b0 b"
b0 d"
b0 f"
b11100001 .$
b11111111 J#
b11111111 2"
b11111111 g#
03
b1110000100000000 ,$
b11100001 ."
b11100001 }#
1E#
12#
b10000 ^$
b10000 `$
17#
14#
1f#
b1 X#
b1 Z#
11"
02
b0 i"
b0 k"
b0 a"
b0 c"
0G"
0O"
0z#
0z"
b1100110011100001 "$
b0 !#
b0 P"
b0 @"
b0 S"
b0 h"
b0 {"
b0 ,#
0Z
b100000000100001001010001000000000 5
b100000000100001001010001000000000 Q
b100000000100001001010001000000000 {
1R
b1100110011100001 !$
b11100001 ("
b11100001 |#
b1100110011100001100010001000100011111111 V#
b11100001 )"
b1111110111011101111000011000100000000000 g"
b11100001 *"
b101 M
b101 V
b10111 L
b10111 W
b0 J
b0 \
1K
b111000011110000111100001 0$
b11100001 1$
b11100000 "
b11100000 :
b11100000 x
b11100000 E"
b11100000 R"
b11100000 T"
b100111001100101011110000111010000100000010011110111000001100011011011110110010001100101 +
1&
#3800
b1010 8
b1010 @
b1010 H
b1010 S
b11110 1
b11110 A
b11110 I
b11110 T
b1 =
b1 >
b101 ?
b10100101 /
b10100101 <
b10100101 d
b1100110011100001100010001010010111111111 V#
b1111110111011101111000011010010100000000 g"
b110011001010010100000000 _"
b10100101 '
b10100101 ,
b10100101 _
b10100101 y
b10100101 q#
b10100101 t#
b10100101 w#
0&
#3900
b1 [
b100000000100001001010001000000000 5
b100000000100001001010001000000000 Q
b100000000100001001010001000000000 {
b11111101111111111000100000000000 \$
b11111111 8"
b1111110111111111111000011010010100000000 g"
b11111111 9"
0K
b1111111111111111 H#
b11111111 I#
b10001100110100101101110011010010111001101101000011010010110111001100111 +
1&
#4000
0&
#4100
b1100110011001100 #$
b11001100 >"
b11001100 }"
b11100010 2$
0:"
b11111111 {$
b0 H$
b0 L$
x-
b11100010 .$
b11001100 H"
b11001100 B"
b11001100 K"
b11001100 ~"
b11001100 U#
b11111111 g$
b11111111 o$
b11111111 w$
b11111111 X"
b11111111 #"
b11111111 ["
b11111111 ;#
b11111111 T#
b11111111 e$
b11111111 m$
b11111111 u$
b0 j#
b0 7"
b0 <#
b0 S#
b0 h#
b0 ;$
b0 K$
b0 O$
b1010 X
b11110 Y
1Z
b11111111 ""
b11111111 Q#
b11111111 ]$
b100 c$
b1100110011100001 !#
b11100001 P"
b11100001 @"
b11100001 S"
b11100001 h"
b11100001 {"
b11100001 ,#
b10 j"
b10 l"
b100 n"
b11001100 A"
b11001100 `"
b11001100 L#
b10 b"
b10 d"
b100 f"
b11100010 ."
b11100010 }#
b1110001011100010 ,$
b11100010 ="
b11100010 |"
b10 _$
b10 a$
b0 d$
b0 :#
b0 6"
b0 R#
b0 W#
13
b11100001 U"
b11001100 M"
b1100110011100010 "$
b1100110011100010 "#
b0 ?#
b0 F#
b0 ;"
b0 >#
b0 D#
b1100110011100001100010001010010100000000 V#
b0 2"
b0 g#
12
1v$
1O"
b100 i"
b100 k"
1G"
b100 a"
b100 c"
1z#
1z"
b100 ^$
b100 `$
0E#
07#
04#
02#
0f#
b0 X#
b0 Z#
01"
b0 [
b10000000000000000000000000000000000000000000000000000000010000000100000000011011100 5
b10000000000000000000000000000000000000000000000000000000010000000100000000011011100 Q
b10000000000000000000000000000000000000000000000000000000010000000100000000011011100 {
b1 J
b1 \
1&
#4200
0&
#4300
b10100101 ="
b10100101 |"
b1100110000000000 #$
b0 >"
b0 }"
b0 M"
0-
b10100101 "#
b0 H"
b0 B"
b0 K"
b0 ~"
b0 U#
b0 g$
b0 o$
b0 w$
b0 X"
b0 #"
b0 ["
b0 ;#
b0 T#
b0 e$
b0 m$
b0 u$
b11100010 2$
b10 m"
1u
b1 j"
b1 l"
b0 n"
b0 A"
b0 `"
b0 L#
b0 b"
b0 d"
b0 f"
b0 ""
b0 Q#
b0 ]$
b0 _$
b0 a$
b0 c$
b11100010 .$
0Z
b10100101 4"
b10100101 u#
03
b1110001010100101 ,$
b11100010 ."
b11100010 }#
b10100101 U"
1U
1s#
1p"
02
b10 i"
b10 k"
b1 a"
b1 c"
b0 ^$
b0 `$
0v$
0z#
0z"
b1100110011100010 "$
b10100101 !#
b10100101 P"
b10100101 @"
b10100101 S"
b10100101 h"
b10100101 {"
b10100101 ,#
b1000000000000000000000000000000000000000000000000000000000000000000000000000001111 5
b1000000000000000000000000000000000000000000000000000000000000000000000000000001111 Q
b1000000000000000000000000000000000000000000000000000000000000000000000000000001111 {
0R
b1100110011100010 !$
b11100010 ("
b11100010 |#
b1100110011100010100010001010010100000000 V#
b11100010 )"
b1111110111111111111000101010010100000000 g"
b11100010 *"
b1010 M
b1010 V
b11110 L
b11110 W
b0 J
b0 \
1K
b1111111111111101111111111000100000000000 \$
b11111111 |
b11111111 y$
b11111111 z$
b11100001 "
b11100001 :
b11100001 x
b11100001 E"
b11100001 R"
b11100001 T"
b111000101110001011100010 0$
b11100010 1$
1&
#4400
