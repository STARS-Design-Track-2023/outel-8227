$date
	Sat Jun 24 21:04:44 2023
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_shift_reg $end
$var wire 8 ! tb_externalDBWrite [7:0] $end
$var wire 8 " tb_externalAddressBusLowOutput [7:0] $end
$var wire 8 # tb_externalAddressBusHighOutput [7:0] $end
$var reg 1 $ tb_clk $end
$var reg 8 % tb_externalDBRead [7:0] $end
$var reg 101 & tb_flags [100:0] $end
$var reg 1 ' tb_nrst $end
$var reg 1025 ( test_name [1024:0] $end
$scope module dataflow $end
$var wire 1 ) adhPresetWriteEnable $end
$var wire 1 * adlPresetWriteEnable $end
$var wire 1 $ clk $end
$var wire 8 + externalAddressBusHighOutput [7:0] $end
$var wire 8 , externalAddressBusLowOutput [7:0] $end
$var wire 8 - externalDBRead [7:0] $end
$var wire 8 . externalDBWrite [7:0] $end
$var wire 101 / flags [100:0] $end
$var wire 1 ' nrst $end
$var wire 8 0 yRegToSB [7:0] $end
$var wire 8 1 xRegToSB [7:0] $end
$var wire 8 2 stackPointerRegToSB [7:0] $end
$var wire 8 3 stackPointerRegToADL [7:0] $end
$var wire 8 4 stackBusDisconnected [7:0] $end
$var wire 8 5 stackBus [7:0] $end
$var wire 1 6 sbPresetWriteEnable $end
$var wire 8 7 sbPresetOutput [7:0] $end
$var wire 8 8 psrRegToLogicController [7:0] $end
$var wire 8 9 psrRegToDB [7:0] $end
$var wire 8 : pclRegToPcIncrementer [7:0] $end
$var wire 8 ; pclRegToDB [7:0] $end
$var wire 8 < pclRegToADL [7:0] $end
$var wire 8 = pchRegToPcIncrementer [7:0] $end
$var wire 8 > pchRegToDB [7:0] $end
$var wire 8 ? pchRegToADH [7:0] $end
$var wire 8 @ pcIncrementerToPclReg [7:0] $end
$var wire 8 A pcIncrementerToPchReg [7:0] $end
$var wire 8 B dorRegToExternalDB [7:0] $end
$var wire 1 C dbPresetWriteEnable $end
$var wire 8 D dbPresetOutput [7:0] $end
$var wire 8 E dataToDB [7:0] $end
$var wire 8 F dataToADL [7:0] $end
$var wire 8 G dataToADH [7:0] $end
$var wire 8 H dataBusDisconnected [7:0] $end
$var wire 8 I dataBus [7:0] $end
$var wire 8 J aluRegToSB [7:0] $end
$var wire 8 K aluRegToADL [7:0] $end
$var wire 1 L aluOverflowOut $end
$var wire 8 M aluOutput [7:0] $end
$var wire 1 N aluCarryOut $end
$var wire 8 O adlPresetOutput [7:0] $end
$var wire 8 P adlADHIncrementerToPclReg [7:0] $end
$var wire 8 Q adlADHIncrementerToPchReg [7:0] $end
$var wire 8 R adhPresetOutput [7:0] $end
$var wire 8 S addressLowBus [7:0] $end
$var wire 8 T addressHighBusDisconnected [7:0] $end
$var wire 8 U addressHighBus [7:0] $end
$var wire 8 V accRegToSB [7:0] $end
$var wire 8 W accRegToDB [7:0] $end
$var wire 8 X ablRegToExternalADL [7:0] $end
$var wire 8 Y abhRegToExternalADH [7:0] $end
$scope module abhRegister $end
$var wire 1 Z busReadEnable $end
$var wire 1 $ clk $end
$var wire 8 [ muxOutput [7:0] $end
$var wire 1 ' nrst $end
$var wire 1 \ busSelectEncoded $end
$var wire 8 ] busOutputs [7:0] $end
$var wire 8 ^ busInputs [7:0] $end
$var reg 8 _ currentState [7:0] $end
$var reg 8 ` nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 Z select $end
$var wire 1 \ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 a temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ablRegister $end
$var wire 1 b busReadEnable $end
$var wire 1 $ clk $end
$var wire 8 c muxOutput [7:0] $end
$var wire 1 ' nrst $end
$var wire 1 d busSelectEncoded $end
$var wire 8 e busOutputs [7:0] $end
$var wire 8 f busInputs [7:0] $end
$var reg 8 g currentState [7:0] $end
$var reg 8 h nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 b select $end
$var wire 1 d encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 i temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module accumulatorRegister $end
$var wire 1 j busReadEnable $end
$var wire 1 $ clk $end
$var wire 8 k muxOutput [7:0] $end
$var wire 1 ' nrst $end
$var wire 1 l busSelectEncoded $end
$var wire 16 m busOutputs [15:0] $end
$var wire 8 n busInputs [7:0] $end
$var reg 8 o currentState [7:0] $end
$var reg 8 p nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 j select $end
$var wire 1 l encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 q temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module addressHighBusModule $end
$var wire 24 r busInputs [23:0] $end
$var wire 8 s busOutput [7:0] $end
$var wire 3 t busSelect [2:0] $end
$var wire 2 u busSelectEncoded [1:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope module encoder $end
$var wire 3 v select [2:0] $end
$var wire 2 w encodedSelect [1:0] $end
$scope begin genblk1[0] $end
$var wire 3 x temp [2:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 3 y temp [2:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module addressLowBusModule $end
$var wire 40 z busInputs [39:0] $end
$var wire 8 { busOutput [7:0] $end
$var wire 5 | busSelect [4:0] $end
$var wire 3 } busSelectEncoded [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope module encoder $end
$var wire 5 ~ select [4:0] $end
$var wire 3 !" encodedSelect [2:0] $end
$scope begin genblk1[0] $end
$var wire 5 "" temp [4:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 5 #" temp [4:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 5 $" temp [4:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module adhPreset $end
$var wire 1 %" set_00 $end
$var wire 1 &" set_01 $end
$var wire 1 '" set_FA $end
$var wire 1 (" set_FB $end
$var wire 1 )" set_FC $end
$var wire 1 *" set_FD $end
$var wire 1 +" set_FE $end
$var wire 1 ," set_FF $end
$var reg 8 -" bus_out [7:0] $end
$upscope $end
$scope module adlADHIncrementor $end
$var wire 1 ." decrement $end
$var wire 1 /" increment $end
$var wire 8 0" output_lowbyte [7:0] $end
$var wire 8 1" output_highbyte [7:0] $end
$var wire 8 2" input_lowbyte [7:0] $end
$var wire 8 3" input_highbyte [7:0] $end
$var reg 16 4" address [15:0] $end
$var reg 16 5" nextAddress [15:0] $end
$upscope $end
$scope module adlPreset $end
$var wire 1 6" set_00 $end
$var wire 1 7" set_01 $end
$var wire 1 8" set_FA $end
$var wire 1 9" set_FB $end
$var wire 1 :" set_FC $end
$var wire 1 ;" set_FD $end
$var wire 1 <" set_FE $end
$var wire 1 =" set_FF $end
$var reg 8 >" bus_out [7:0] $end
$upscope $end
$scope module alu $end
$var wire 8 ?" ADL_input [7:0] $end
$var wire 1 @" carry_in $end
$var wire 1 A" e_and $end
$var wire 1 B" e_eor $end
$var wire 1 C" e_or $end
$var wire 1 D" e_shiftr $end
$var wire 1 E" e_sum $end
$var wire 1 F" enable_dec $end
$var wire 1 G" lda_sb $end
$var wire 1 H" lda_zero $end
$var wire 1 I" ldb_adl $end
$var wire 1 J" ldb_db $end
$var wire 1 K" ldb_inv_db $end
$var wire 1 L overflow $end
$var wire 1 L" sum_carry_out $end
$var wire 8 M" sum [7:0] $end
$var wire 8 N" SB_input [7:0] $end
$var wire 8 O" DB_input [7:0] $end
$var reg 8 P" a [7:0] $end
$var reg 8 Q" alu_out [7:0] $end
$var reg 8 R" b [7:0] $end
$var reg 8 S" bcd_buffer [7:0] $end
$var reg 1 N carry_out $end
$var reg 4 T" hi_nib [3:0] $end
$var reg 4 U" lo_nib [3:0] $end
$var reg 7 V" rot_buffer [6:0] $end
$upscope $end
$scope module aluRegister $end
$var wire 8 W" busInputs [7:0] $end
$var wire 1 X" busReadEnable $end
$var wire 1 $ clk $end
$var wire 8 Y" muxOutput [7:0] $end
$var wire 1 ' nrst $end
$var wire 1 Z" busSelectEncoded $end
$var wire 16 [" busOutputs [15:0] $end
$var reg 8 \" currentState [7:0] $end
$var reg 8 ]" nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 X" select $end
$var wire 1 Z" encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 ^" temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module bridge $end
$var wire 8 _" bus3Input [7:0] $end
$var wire 1 `" open1To2 $end
$var wire 1 a" open2To1 $end
$var wire 1 b" open2To3 $end
$var wire 1 c" open3To2 $end
$var wire 8 d" bus2Input [7:0] $end
$var wire 8 e" bus1Input [7:0] $end
$var reg 8 f" bus1Output [7:0] $end
$var reg 8 g" bus2Output [7:0] $end
$var reg 8 h" bus3Output [7:0] $end
$upscope $end
$scope module dataBusModule $end
$var wire 48 i" busInputs [47:0] $end
$var wire 8 j" busOutput [7:0] $end
$var wire 6 k" busSelect [5:0] $end
$var wire 3 l" busSelectEncoded [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope module encoder $end
$var wire 6 m" select [5:0] $end
$var wire 3 n" encodedSelect [2:0] $end
$scope begin genblk1[0] $end
$var wire 6 o" temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 6 p" temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 6 q" temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module dbPreset $end
$var wire 1 r" set_00 $end
$var wire 1 s" set_01 $end
$var wire 1 t" set_FA $end
$var wire 1 u" set_FB $end
$var wire 1 v" set_FC $end
$var wire 1 w" set_FD $end
$var wire 1 x" set_FE $end
$var wire 1 y" set_FF $end
$var reg 8 z" bus_out [7:0] $end
$upscope $end
$scope module dorRegister $end
$var wire 8 {" busInputs [7:0] $end
$var wire 1 |" busReadEnable $end
$var wire 1 $ clk $end
$var wire 8 }" muxOutput [7:0] $end
$var wire 1 ' nrst $end
$var wire 1 ~" busSelectEncoded $end
$var wire 8 !# busOutputs [7:0] $end
$var reg 8 "# currentState [7:0] $end
$var reg 8 ## nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 |" select $end
$var wire 1 ~" encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 $# temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module externalDBToADH $end
$var wire 1 %# enable $end
$var wire 8 &# interfaceInput [7:0] $end
$var reg 8 '# interfaceOutput [7:0] $end
$upscope $end
$scope module externalDBToADL $end
$var wire 1 (# enable $end
$var wire 8 )# interfaceInput [7:0] $end
$var reg 8 *# interfaceOutput [7:0] $end
$upscope $end
$scope module externalDBToDB $end
$var wire 1 +# enable $end
$var wire 8 ,# interfaceInput [7:0] $end
$var reg 8 -# interfaceOutput [7:0] $end
$upscope $end
$scope module pcIncrementor $end
$var wire 1 .# decrement $end
$var wire 1 /# increment $end
$var wire 8 0# input_highbyte [7:0] $end
$var wire 8 1# input_lowbyte [7:0] $end
$var wire 8 2# output_lowbyte [7:0] $end
$var wire 8 3# output_highbyte [7:0] $end
$var reg 16 4# address [15:0] $end
$var reg 16 5# nextAddress [15:0] $end
$upscope $end
$scope module pchRegister $end
$var wire 16 6# busInputs [15:0] $end
$var wire 2 7# busReadEnable [1:0] $end
$var wire 1 $ clk $end
$var wire 8 8# muxOutput [7:0] $end
$var wire 1 ' nrst $end
$var wire 1 9# busSelectEncoded $end
$var wire 24 :# busOutputs [23:0] $end
$var reg 8 ;# currentState [7:0] $end
$var reg 8 <# nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope module encoder $end
$var wire 2 =# select [1:0] $end
$var wire 1 9# encodedSelect $end
$scope begin genblk1[0] $end
$var wire 2 ># temp [1:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pclRegister $end
$var wire 16 ?# busInputs [15:0] $end
$var wire 2 @# busReadEnable [1:0] $end
$var wire 1 $ clk $end
$var wire 8 A# muxOutput [7:0] $end
$var wire 1 ' nrst $end
$var wire 1 B# busSelectEncoded $end
$var wire 24 C# busOutputs [23:0] $end
$var reg 8 D# currentState [7:0] $end
$var reg 8 E# nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope module encoder $end
$var wire 2 F# select [1:0] $end
$var wire 1 B# encodedSelect $end
$scope begin genblk1[0] $end
$var wire 2 G# temp [1:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module psr $end
$var wire 1 H# DB0_C $end
$var wire 1 I# DB1_Z $end
$var wire 1 J# DB2_I $end
$var wire 1 K# DB3_D $end
$var wire 1 L# DB6_V $end
$var wire 1 M# DB7_N $end
$var wire 8 N# DB_in [7:0] $end
$var wire 1 O# DBall_Z $end
$var wire 8 P# PSR_RCL [7:0] $end
$var wire 1 Q# break_set $end
$var wire 1 N carry $end
$var wire 1 R# carry_C $end
$var wire 1 $ clk $end
$var wire 1 S# enableDBWrite $end
$var wire 1 T# manual_C $end
$var wire 1 U# manual_D $end
$var wire 1 V# manual_I $end
$var wire 1 W# manual_set $end
$var wire 1 ' nrst $end
$var wire 1 L overflow $end
$var wire 1 X# overflow_V $end
$var wire 1 Y# rcl_V $end
$var wire 8 Z# internalFFOutput [7:0] $end
$var wire 8 [# internalFFInput [7:0] $end
$var wire 8 \# PSR_DB [7:0] $end
$scope module inputInterface $end
$var wire 1 ]# enable $end
$var wire 8 ^# interfaceInput [7:0] $end
$var reg 8 _# interfaceOutput [7:0] $end
$upscope $end
$scope module outputInterface $end
$var wire 1 S# enable $end
$var wire 8 `# interfaceInput [7:0] $end
$var reg 8 a# interfaceOutput [7:0] $end
$upscope $end
$scope module processStatusReg $end
$var wire 1 H# DB0_C $end
$var wire 1 I# DB1_Z $end
$var wire 1 J# DB2_I $end
$var wire 1 K# DB3_D $end
$var wire 1 L# DB6_V $end
$var wire 1 M# DB7_N $end
$var wire 8 b# DB_in [7:0] $end
$var wire 1 O# DBall_Z $end
$var wire 1 Q# break_set $end
$var wire 1 N carry $end
$var wire 1 R# carry_C $end
$var wire 1 $ clk $end
$var wire 1 T# manual_C $end
$var wire 1 U# manual_D $end
$var wire 1 V# manual_I $end
$var wire 1 W# manual_set $end
$var wire 1 ' nrst $end
$var wire 1 L overflow $end
$var wire 1 X# overflow_V $end
$var wire 1 Y# rcl_V $end
$var wire 8 c# stat_buf_nxt [7:0] $end
$var wire 8 d# PSR_Output [7:0] $end
$var reg 8 e# status_buffer [7:0] $end
$upscope $end
$upscope $end
$scope module sbPreset $end
$var wire 1 f# set_00 $end
$var wire 1 g# set_01 $end
$var wire 1 h# set_FA $end
$var wire 1 i# set_FB $end
$var wire 1 j# set_FC $end
$var wire 1 k# set_FD $end
$var wire 1 l# set_FE $end
$var wire 1 m# set_FF $end
$var reg 8 n# bus_out [7:0] $end
$upscope $end
$scope module stackBusModule $end
$var wire 48 o# busInputs [47:0] $end
$var wire 8 p# busOutput [7:0] $end
$var wire 6 q# busSelect [5:0] $end
$var wire 3 r# busSelectEncoded [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope module encoder $end
$var wire 6 s# select [5:0] $end
$var wire 3 t# encodedSelect [2:0] $end
$scope begin genblk1[0] $end
$var wire 6 u# temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 6 v# temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 6 w# temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module stackPointerRegister $end
$var wire 8 x# busInputs [7:0] $end
$var wire 1 y# busReadEnable $end
$var wire 1 $ clk $end
$var wire 8 z# muxOutput [7:0] $end
$var wire 1 ' nrst $end
$var wire 1 {# busSelectEncoded $end
$var wire 16 |# busOutputs [15:0] $end
$var reg 8 }# currentState [7:0] $end
$var reg 8 ~# nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 y# select $end
$var wire 1 {# encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 !$ temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module xRegister $end
$var wire 8 "$ busInputs [7:0] $end
$var wire 1 #$ busReadEnable $end
$var wire 1 $ clk $end
$var wire 8 $$ muxOutput [7:0] $end
$var wire 1 ' nrst $end
$var wire 1 %$ busSelectEncoded $end
$var wire 8 &$ busOutputs [7:0] $end
$var reg 8 '$ currentState [7:0] $end
$var reg 8 ($ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 #$ select $end
$var wire 1 %$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 )$ temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module yRegister $end
$var wire 8 *$ busInputs [7:0] $end
$var wire 1 +$ busReadEnable $end
$var wire 1 $ clk $end
$var wire 8 ,$ muxOutput [7:0] $end
$var wire 1 ' nrst $end
$var wire 1 -$ busSelectEncoded $end
$var wire 8 .$ busOutputs [7:0] $end
$var reg 8 /$ currentState [7:0] $end
$var reg 8 0$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 +$ select $end
$var wire 1 -$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 1$ temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope task reset_dut $end
$upscope $end
$scope task reset_flags $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
01$
b0 0$
b0 /$
b0 .$
0-$
b0 ,$
0+$
b0 *$
0)$
b0 ($
b0 '$
b0 &$
0%$
b0 $$
0#$
b0 "$
0!$
b0 ~#
b0 }#
b0 |#
0{#
b0 z#
0y#
b0 x#
b0 w#
b0 v#
b0 u#
b0 t#
b0 s#
b0 r#
b0 q#
b0 p#
b0 o#
b0 n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
b0 e#
b0 d#
b0zz0000 c#
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
1]#
b0 \#
b0 [#
b0 Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
b0 P#
0O#
b0 N#
0M#
0L#
0K#
0J#
0I#
0H#
b10 G#
b10 F#
bz E#
b0 D#
b0 C#
1B#
bz A#
b10 @#
bzxxxxxxxx ?#
b10 >#
b10 =#
bz <#
b0 ;#
b0 :#
19#
bz 8#
b10 7#
bzxxxxxxxx 6#
bz 5#
bz 4#
bz 3#
bz 2#
b0 1#
b0 0#
0/#
0.#
b0 -#
bx ,#
0+#
b0 *#
bx )#
0(#
b0 '#
bx &#
0%#
0$#
b0 ##
b0 "#
b0 !#
0~"
b0 }"
0|"
b0 {"
b0 z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0xxxxxxxx00000000 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
0c"
0b"
0a"
0`"
b0 _"
0^"
b0 ]"
b0 \"
b0 ["
0Z"
b0 Y"
0X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
b0 ?"
b0 >"
0="
0<"
0;"
0:"
09"
08"
07"
06"
bx 5"
bx 4"
b0 3"
b0 2"
bx 1"
bx 0"
0/"
0."
b0 -"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0xxxxxxxx00000000 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0xxxxxxxx00000000 r
0q
b0 p
b0 o
b0 n
b0 m
0l
b0 k
0j
0i
b0 h
b0 g
b0 f
b0 e
0d
b0 c
0b
0a
b0 `
b0 _
b0 ^
b0 ]
0\
b0 [
0Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
bx Q
bx P
b0 O
0N
b0 M
xL
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
0C
b0 B
bz A
bz @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
06
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
bx -
b0 ,
b0 +
0*
0)
b101001001100101011100110110010101110100 (
0'
b0 &
bx %
0$
b0 #
b0 "
b0 !
$end
#100
1$
#200
0$
#300
1$
#400
1'
0$
#500
bz :
bz 1#
bz ;
b0zzzzzzzzxxxxxxxx00000000 z
bz <
bz =
bz 0#
b0zzzzzzzzzzzzzzzz00000000xxxxxxxx00000000 i"
bz >
bzxxxxxxxx00000000 r
bz ?
b0zz0000 e#
bz C#
bz D#
bz :#
bz ;#
1$
#600
0$
#700
1$
#800
0$
#810
b10011000110111101100001011001000010000001011000001000000101001001100101011001110110100101110011011101000110010101110010001000000110000101101110011001000010000001000001010000100100100000100000010100100110010101100111 (
#900
1$
#1000
b10101010 ($
b10101010 `
b10101010 z#
b10101010 $$
b10101010 ,$
b10101010 k
b10101010 5
b10101010 n
b10101010 N"
b10101010 g"
b10101010 x#
b10101010 "$
b10101010 *$
b10101010 c
b10101010 [
b10101010 U
b10101010 ^
b10101010 f
b10101010 2"
b10101010 3"
b10101010 h"
b10101010 T
b10101010 s
b10101010 _"
b1 u
b1 w
b10 x
b10101010 G
b10101010 '#
1#$
1c"
1Z
b10 t
b10 v
1%#
b10011000110111101100001011001000010000001000001011000110110001100100000010100100110010101100111011010010111001101110100011001010111001000100000011000010110111001100100001000000110001101101100011001010110000101110010001000000100010001000010 (
b0zzzzzzzzzzzzzzzz000000001010101000000000 i"
b0zzzzzzzz1010101000000000 z
bz1010101000000000 r
b10101010 %
b10101010 -
b10101010 &#
b10101010 )#
b10101010 ,#
b1000000000000000000000000000000000000000000000001001000000000000000001000 &
b1000000000000000000000000000000000000000000000001001000000000000000001000 /
0$
#1100
b101010100000000000000000000000000000000000000000 o#
b10101010 1
b10101010 &$
b10101010 '$
b10101010 #
b10101010 +
b10101010 Y
b10101010 ]
b10101010 _
1$
#1200
b10101010 p
b10101010 4
b10101010 d"
b10101010 p#
b100000 u#
b101 r#
b101 t#
b100000 w#
b0 u
b0 w
b0 x
b0 c
b0 [
b0 U
b0 ^
b0 f
b0 2"
b0 3"
b0 h"
b10101010 z#
b10101010 $$
b10101010 ,$
b10101010 k
b10101010 5
b10101010 n
b10101010 N"
b10101010 g"
b10101010 x#
b10101010 "$
b10101010 *$
1j
b100000 q#
b100000 s#
b0 T
b0 s
b0 _"
b0 G
b0 '#
0c"
b0 t
b0 v
0#$
0Z
0%#
b100110001101111011000010110010000100000010001000100111101010010001000000110011001110010011011110110110100100000010000010100001101000011 (
b0zzzzzzzzzzzzzzzz000000000000000000000000 i"
b0zzzzzzzz0000000000000000 z
bz0000000000000000 r
b0 %
b0 -
b0 &#
b0 )#
b0 ,#
b1000000000000100000000000000 &
b1000000000000100000000000000 /
0$
#1300
b101010100000000000000000000000001010101000000000 o#
b10101010 V
b0zzzzzzzzzzzzzzzz101010100000000000000000 i"
b10101010 W
b1010101010101010 m
b10101010 o
1$
#1400
b10101010 ##
b10101010 [#
b10101010 _#
b0 z#
b0 $$
b0 ,$
b0 k
b0 5
b0 n
b0 N"
b0 g"
b0 x#
b0 "$
b0 *$
b10101010 }"
b10101010 I
b10101010 O"
b10101010 f"
b10101010 {"
b10101010 N#
b10101010 ^#
b10101010 b#
b10101010 H
b10101010 e"
b10101010 j"
b10 l"
b10 n"
b100 p"
b0 4
b0 d"
b0 p#
b0 u#
b0 r#
b0 t#
b0 w#
1|"
b100 k"
b100 m"
b0 q#
b0 s#
0j
b10000000001000000000000000000000000000000000 &
b10000000001000000000000000000000000000000000 /
0$
#1500
b10101010 !
b10101010 .
b10101010 B
b10101010 !#
b10101010 "#
1$
#1600
b0 [#
b0 _#
b0 }"
b0 I
b0 O"
b0 f"
b0 {"
b0 N#
b0 ^#
b0 b#
b0 H
b0 e"
b0 j"
b0 l"
b0 n"
b0 p"
b0 k"
b0 m"
0|"
b0 &
b0 /
0$
#1700
1$
#1800
0$
#1900
1$
#2000
