$date
	Tue Jun 27 15:55:32 2023
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_8227_template $end
$var wire 8 ! tb_dataBusOutput [7:0] $end
$var wire 8 " tb_AddressBusLow [7:0] $end
$var wire 8 # tb_AddressBusHigh [7:0] $end
$var parameter 32 $ CLK_PERIOD $end
$var reg 8 % targetHighAddress [7:0] $end
$var reg 8 & targetLowAddress [7:0] $end
$var reg 1 ' tb_clk $end
$var reg 8 ( tb_dataBusInput [7:0] $end
$var reg 1 ) tb_interruptRequest $end
$var reg 1 * tb_nonMaskableInterrupt $end
$var reg 1 + tb_nrst $end
$var reg 1025 , test_name [1024:0] $end
$scope module top8227 $end
$var wire 1 ' clk $end
$var wire 8 - dataBusInput [7:0] $end
$var wire 1 ) interruptRequest $end
$var wire 1 * nonMaskableInterrupt $end
$var wire 1 + nrst $end
$var wire 1 . resetRunning $end
$var wire 8 / opcodeCurrentValue [7:0] $end
$var wire 1 0 nmiRunning $end
$var wire 6 1 instructionCode [5:0] $end
$var wire 1 2 getInstructionPreInjection $end
$var wire 1 3 getInstructionPostInjection $end
$var wire 1 4 freeCarry $end
$var wire 128 5 flags [127:0] $end
$var wire 8 6 dataBusOutput [7:0] $end
$var wire 1 7 aluCarryOut $end
$var wire 4 8 addressingCode [3:0] $end
$var wire 8 9 PSRCurrentValue [7:0] $end
$var wire 8 : AddressBusLow [7:0] $end
$var wire 8 ; AddressBusHigh [7:0] $end
$scope module decoder $end
$var wire 8 < opcode [7:0] $end
$var wire 2 = c [1:0] $end
$var wire 3 > b [2:0] $end
$var wire 3 ? a [2:0] $end
$var reg 4 @ ADDRESS [3:0] $end
$var reg 6 A CMD [5:0] $end
$scope begin comb_decoder $end
$upscope $end
$upscope $end
$scope module demux $end
$var wire 1 B PSR_C $end
$var wire 1 C PSR_N $end
$var wire 1 D PSR_V $end
$var wire 1 E PSR_Z $end
$var wire 1 ' clk $end
$var wire 1 F irq $end
$var wire 1 G jump $end
$var wire 1 + nrst $end
$var wire 4 H preFFAddressingCode [3:0] $end
$var wire 6 I preFFInstructionCode [5:0] $end
$var wire 3 J state [2:0] $end
$var wire 1 . reset $end
$var wire 1 0 nmi $end
$var wire 1 K isAddressing $end
$var wire 6 L instructionCode [5:0] $end
$var wire 1 2 getInstructionPreInjection $end
$var wire 1 3 getInstructionPostInjection $end
$var wire 1 4 free_carry $end
$var wire 4 M addressingCode [3:0] $end
$var reg 1 N IS_STORE_ACC_INSTRUCT $end
$var reg 1 O IS_STORE_X_INSTRUCT $end
$var reg 1 P IS_STORE_Y_INSTRUCT $end
$var reg 128 Q outflags [127:0] $end
$var reg 1 R passAddressing $end
$scope module state_machine $end
$var wire 1 ' clk $end
$var wire 4 S decodedAddress [3:0] $end
$var wire 6 T decodedInstruction [5:0] $end
$var wire 1 U endAddressing $end
$var wire 1 R noAddressing $end
$var wire 1 + nrst $end
$var wire 1 3 getInstruction $end
$var reg 4 V currentAddress [3:0] $end
$var reg 6 W currentInstruction [5:0] $end
$var reg 1 K mode $end
$var reg 4 X nextAddress [3:0] $end
$var reg 6 Y nextInstruction [5:0] $end
$var reg 1 Z nextMode $end
$var reg 3 [ nextTime [2:0] $end
$var reg 3 \ timeState [2:0] $end
$scope begin comb_OPCode $end
$upscope $end
$scope begin comb_timingGeneration $end
$upscope $end
$scope begin ff_OPCode $end
$upscope $end
$scope begin ff_timingGeneration_mode $end
$upscope $end
$scope begin ff_timingGeneration_timeState $end
$upscope $end
$upscope $end
$scope begin blockName $end
$upscope $end
$upscope $end
$scope module free_carry_ff $end
$var wire 1 ' clk $end
$var wire 1 ] en $end
$var wire 1 + nrst $end
$var wire 1 7 ALUcarry $end
$var reg 1 4 freeCarry $end
$var reg 1 ^ freeCarryNext $end
$scope begin comb_free_carry_ff $end
$upscope $end
$scope begin ff_free_carry_ff $end
$upscope $end
$upscope $end
$scope module instructionLoader $end
$var wire 1 ' clk $end
$var wire 1 _ enableIFlag $end
$var wire 8 ` externalDB [7:0] $end
$var wire 1 ) interruptRequest $end
$var wire 1 2 loadNextInstruction $end
$var wire 1 * nonMaskableInterrupt $end
$var wire 1 + nrst $end
$var wire 1 a processStatusRegIFlag $end
$var wire 1 . resetRunning $end
$var wire 1 b resetDetected $end
$var wire 1 0 nmiRunning $end
$var wire 1 c nmiGenerated $end
$var wire 1 d irqGenerated $end
$var reg 1 3 instructionRegReadEnable $end
$var reg 8 e nextInstruction [7:0] $end
$scope module interruptInjector $end
$var wire 1 ' clk $end
$var wire 1 3 interruptAcknowleged $end
$var wire 1 ) interruptRequest $end
$var wire 1 * nonMaskableInterrupt $end
$var wire 1 + nrst $end
$var wire 1 a processStatusRegIFlag $end
$var wire 1 f synchronizedNMI $end
$var wire 1 g synchronizedIRQ $end
$var wire 1 . resetRunning $end
$var wire 1 b resetDetected $end
$var wire 1 0 nmiRunning $end
$var wire 1 c nmiGenerated $end
$var wire 1 d irqGenerated $end
$scope module irqGeneratedFF $end
$var wire 1 ' clk $end
$var wire 1 3 interruptAcknowleged $end
$var wire 1 + nrst $end
$var wire 1 a processStatusRegIFlag $end
$var wire 1 g synchronizedIRQ $end
$var reg 1 d irqGenerated $end
$var reg 1 h nextIRQGenerated $end
$scope begin IRQNextStateLogic $end
$upscope $end
$scope begin nmiAssignment $end
$upscope $end
$upscope $end
$scope module irqSync $end
$var wire 1 ' clk $end
$var wire 1 ) in $end
$var wire 1 + nrst $end
$var reg 1 i nextQ1 $end
$var reg 1 j nextQ2 $end
$var reg 1 g out $end
$var reg 1 k q1 $end
$var reg 1 l q2 $end
$scope begin nextStateAssignment $end
$upscope $end
$scope begin nextStateLogic $end
$upscope $end
$scope begin outputLogic $end
$upscope $end
$upscope $end
$scope module nmiGeneratedFF $end
$var wire 1 ' clk $end
$var wire 1 3 interruptAcknowleged $end
$var wire 1 + nrst $end
$var wire 1 a processStatusRegIFlag $end
$var wire 1 f synchronizedNMI $end
$var wire 1 0 nmiRunning $end
$var reg 1 m nextNMIGenerated $end
$var reg 1 c nmiGenerated $end
$scope begin NMInextStateLogic $end
$upscope $end
$scope begin nmiAssignment $end
$upscope $end
$upscope $end
$scope module nmiRunningFF $end
$var wire 1 ' clk $end
$var wire 1 3 interruptAcknowleged $end
$var wire 1 c nmiGenerated $end
$var wire 1 + nrst $end
$var wire 1 a processStatusRegIFlag $end
$var wire 1 f synchronizedNMI $end
$var reg 1 n nextNMIRunning $end
$var reg 1 0 nmiRunning $end
$scope begin NMInextStateLogic $end
$upscope $end
$scope begin nmiAssignment $end
$upscope $end
$upscope $end
$scope module nmiSync $end
$var wire 1 ' clk $end
$var wire 1 * in $end
$var wire 1 + nrst $end
$var reg 1 o nextQ1 $end
$var reg 1 p nextQ2 $end
$var reg 1 f out $end
$var reg 1 q q1 $end
$var reg 1 r q2 $end
$scope begin nextStateAssignment $end
$upscope $end
$scope begin nextStateLogic $end
$upscope $end
$scope begin outputLogic $end
$upscope $end
$upscope $end
$scope module resetDetector $end
$var wire 1 ' clk $end
$var wire 1 s nextState $end
$var wire 1 + nrst $end
$var reg 1 b resetInection $end
$var reg 1 t state $end
$scope begin nextStateAssignment $end
$upscope $end
$scope begin outputLogic $end
$upscope $end
$upscope $end
$scope module resetRunningFF $end
$var wire 1 ' clk $end
$var wire 1 + nrst $end
$var wire 1 a processStatusRegIFlag $end
$var wire 1 b resetInitiated $end
$var reg 1 u nextResetRunning $end
$var reg 1 . resetRunning $end
$scope begin nmiAssignment $end
$upscope $end
$scope begin resetRunningNextStateLogic $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module internalDataflow $end
$var wire 1 v adhPresetWriteEnable $end
$var wire 1 w adlPresetWriteEnable $end
$var wire 1 ' clk $end
$var wire 8 x externalAddressBusHighOutput [7:0] $end
$var wire 8 y externalAddressBusLowOutput [7:0] $end
$var wire 8 z externalDBRead [7:0] $end
$var wire 8 { externalDBWrite [7:0] $end
$var wire 128 | flags [127:0] $end
$var wire 1 + nrst $end
$var wire 8 } yRegToSB [7:0] $end
$var wire 8 ~ xRegToSB [7:0] $end
$var wire 8 !" stackPointerRegToSB [7:0] $end
$var wire 8 "" stackPointerRegToADL [7:0] $end
$var wire 8 #" stackBusDisconnected [7:0] $end
$var wire 8 $" stackBus [7:0] $end
$var wire 1 %" sbPresetWriteEnable $end
$var wire 8 &" sbPresetOutput [7:0] $end
$var wire 8 '" psrRegToLogicController [7:0] $end
$var wire 8 (" psrRegToDB [7:0] $end
$var wire 8 )" pclRegToPcIncrementer [7:0] $end
$var wire 8 *" pclRegToDB [7:0] $end
$var wire 8 +" pclRegToADL [7:0] $end
$var wire 8 ," pchRegToPcIncrementer [7:0] $end
$var wire 8 -" pchRegToDB [7:0] $end
$var wire 8 ." pchRegToADH [7:0] $end
$var wire 8 /" pcIncrementerToPclReg [7:0] $end
$var wire 8 0" pcIncrementerToPchReg [7:0] $end
$var wire 8 1" dorRegToExternalDB [7:0] $end
$var wire 1 2" dbPresetWriteEnable $end
$var wire 8 3" dbPresetOutput [7:0] $end
$var wire 8 4" dataToDB [7:0] $end
$var wire 8 5" dataToADL [7:0] $end
$var wire 8 6" dataToADH [7:0] $end
$var wire 8 7" dataBusDisconnected [7:0] $end
$var wire 8 8" dataBus [7:0] $end
$var wire 8 9" aluRegToSB [7:0] $end
$var wire 8 :" aluRegToADL [7:0] $end
$var wire 1 ;" aluOverflowOut $end
$var wire 8 <" aluOutput [7:0] $end
$var wire 1 7 aluCarryOut $end
$var wire 8 =" adlPresetOutput [7:0] $end
$var wire 8 >" adlADHIncrementerToPclReg [7:0] $end
$var wire 8 ?" adlADHIncrementerToPchReg [7:0] $end
$var wire 8 @" adhPresetOutput [7:0] $end
$var wire 8 A" addressLowBus [7:0] $end
$var wire 8 B" addressHighBusDisconnected [7:0] $end
$var wire 8 C" addressHighBus [7:0] $end
$var wire 8 D" accRegToSB [7:0] $end
$var wire 8 E" accRegToDB [7:0] $end
$var wire 8 F" ablRegToExternalADL [7:0] $end
$var wire 8 G" abhRegToExternalADH [7:0] $end
$scope module abhRegister $end
$var wire 1 H" busReadEnable $end
$var wire 1 ' clk $end
$var wire 8 I" muxOutput [7:0] $end
$var wire 1 + nrst $end
$var wire 1 J" busSelectEncoded $end
$var wire 8 K" busOutputs [7:0] $end
$var wire 8 L" busInputs [7:0] $end
$var parameter 32 M" BUS_SELECT_ENCODED_SIZE $end
$var parameter 32 N" DEFAULT_VALUE $end
$var parameter 64 O" INPUT_BIT_COUNT $end
$var parameter 32 P" INPUT_COUNT $end
$var parameter 64 Q" OUTPUT_BIT_COUNT $end
$var parameter 32 R" OUTPUT_COUNT $end
$var parameter 32 S" WIDTH $end
$var reg 8 T" currentState [7:0] $end
$var reg 8 U" nextState [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 V" i $end
$upscope $end
$scope module encoder $end
$var wire 1 H" select $end
$var wire 1 J" encodedSelect $end
$var parameter 32 W" INPUT_COUNT $end
$var parameter 32 X" OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 1 Y" temp $end
$var parameter 2 Z" i $end
$scope begin genblk1[0] $end
$var parameter 2 [" j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ablRegister $end
$var wire 1 \" busReadEnable $end
$var wire 1 ' clk $end
$var wire 8 ]" muxOutput [7:0] $end
$var wire 1 + nrst $end
$var wire 1 ^" busSelectEncoded $end
$var wire 8 _" busOutputs [7:0] $end
$var wire 8 `" busInputs [7:0] $end
$var parameter 32 a" BUS_SELECT_ENCODED_SIZE $end
$var parameter 32 b" DEFAULT_VALUE $end
$var parameter 64 c" INPUT_BIT_COUNT $end
$var parameter 32 d" INPUT_COUNT $end
$var parameter 64 e" OUTPUT_BIT_COUNT $end
$var parameter 32 f" OUTPUT_COUNT $end
$var parameter 32 g" WIDTH $end
$var reg 8 h" currentState [7:0] $end
$var reg 8 i" nextState [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 j" i $end
$upscope $end
$scope module encoder $end
$var wire 1 \" select $end
$var wire 1 ^" encodedSelect $end
$var parameter 32 k" INPUT_COUNT $end
$var parameter 32 l" OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 1 m" temp $end
$var parameter 2 n" i $end
$scope begin genblk1[0] $end
$var parameter 2 o" j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module accumulatorRegister $end
$var wire 1 p" busReadEnable $end
$var wire 1 ' clk $end
$var wire 8 q" muxOutput [7:0] $end
$var wire 1 + nrst $end
$var wire 1 r" busSelectEncoded $end
$var wire 16 s" busOutputs [15:0] $end
$var wire 8 t" busInputs [7:0] $end
$var parameter 32 u" BUS_SELECT_ENCODED_SIZE $end
$var parameter 32 v" DEFAULT_VALUE $end
$var parameter 64 w" INPUT_BIT_COUNT $end
$var parameter 32 x" INPUT_COUNT $end
$var parameter 64 y" OUTPUT_BIT_COUNT $end
$var parameter 32 z" OUTPUT_COUNT $end
$var parameter 32 {" WIDTH $end
$var reg 8 |" currentState [7:0] $end
$var reg 8 }" nextState [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 ~" i $end
$upscope $end
$scope module encoder $end
$var wire 1 p" select $end
$var wire 1 r" encodedSelect $end
$var parameter 32 !# INPUT_COUNT $end
$var parameter 32 "# OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 1 ## temp $end
$var parameter 2 $# i $end
$scope begin genblk1[0] $end
$var parameter 2 %# j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module addressHighBusModule $end
$var wire 24 &# busInputs [23:0] $end
$var wire 8 '# busOutput [7:0] $end
$var wire 3 (# busSelect [2:0] $end
$var wire 2 )# busSelectEncoded [1:0] $end
$var parameter 32 *# BUS_SELECT_ENCODED_SIZE $end
$var parameter 32 +# INPUT_COUNT $end
$var parameter 32 ,# WIDTH $end
$scope begin genblk1[0] $end
$var parameter 2 -# i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 .# i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 /# i $end
$upscope $end
$scope module encoder $end
$var wire 3 0# select [2:0] $end
$var wire 2 1# encodedSelect [1:0] $end
$var parameter 32 2# INPUT_COUNT $end
$var parameter 32 3# OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 3 4# temp [2:0] $end
$var parameter 2 5# i $end
$scope begin genblk1[0] $end
$var parameter 2 6# j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 7# j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 8# j $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 3 9# temp [2:0] $end
$var parameter 2 :# i $end
$scope begin genblk1[0] $end
$var parameter 2 ;# j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 <# j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 =# j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module addressLowBusModule $end
$var wire 40 ># busInputs [39:0] $end
$var wire 8 ?# busOutput [7:0] $end
$var wire 5 @# busSelect [4:0] $end
$var wire 3 A# busSelectEncoded [2:0] $end
$var parameter 32 B# BUS_SELECT_ENCODED_SIZE $end
$var parameter 32 C# INPUT_COUNT $end
$var parameter 32 D# WIDTH $end
$scope begin genblk1[0] $end
$var parameter 2 E# i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 F# i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 G# i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 H# i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 I# i $end
$upscope $end
$scope module encoder $end
$var wire 5 J# select [4:0] $end
$var wire 3 K# encodedSelect [2:0] $end
$var parameter 32 L# INPUT_COUNT $end
$var parameter 32 M# OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 5 N# temp [4:0] $end
$var parameter 2 O# i $end
$scope begin genblk1[0] $end
$var parameter 2 P# j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 Q# j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 R# j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 S# j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 T# j $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 5 U# temp [4:0] $end
$var parameter 2 V# i $end
$scope begin genblk1[0] $end
$var parameter 2 W# j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 X# j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 Y# j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 Z# j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 [# j $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 5 \# temp [4:0] $end
$var parameter 3 ]# i $end
$scope begin genblk1[0] $end
$var parameter 2 ^# j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 _# j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 `# j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 a# j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 b# j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module adhPreset $end
$var wire 1 c# set_00 $end
$var wire 1 d# set_01 $end
$var wire 1 e# set_FA $end
$var wire 1 f# set_FB $end
$var wire 1 g# set_FC $end
$var wire 1 h# set_FD $end
$var wire 1 i# set_FE $end
$var wire 1 j# set_FF $end
$var reg 8 k# bus_out [7:0] $end
$upscope $end
$scope module adlADHIncrementor $end
$var wire 1 l# decrement $end
$var wire 1 m# increment $end
$var wire 8 n# input_lowbyte [7:0] $end
$var wire 8 o# output_lowbyte [7:0] $end
$var wire 8 p# output_highbyte [7:0] $end
$var wire 8 q# input_highbyte [7:0] $end
$var wire 16 r# address [15:0] $end
$var reg 16 s# nextAddress [15:0] $end
$upscope $end
$scope module adlPreset $end
$var wire 1 t# set_00 $end
$var wire 1 u# set_01 $end
$var wire 1 v# set_FA $end
$var wire 1 w# set_FB $end
$var wire 1 x# set_FC $end
$var wire 1 y# set_FD $end
$var wire 1 z# set_FE $end
$var wire 1 {# set_FF $end
$var reg 8 |# bus_out [7:0] $end
$upscope $end
$scope module alu $end
$var wire 8 }# ADL_input [7:0] $end
$var wire 1 ~# carry_in $end
$var wire 1 !$ e_and $end
$var wire 1 "$ e_eor $end
$var wire 1 #$ e_or $end
$var wire 1 $$ e_shiftr $end
$var wire 1 %$ e_sum $end
$var wire 1 &$ enable_dec $end
$var wire 1 '$ lda_sb $end
$var wire 1 ($ lda_zero $end
$var wire 1 )$ ldb_adl $end
$var wire 1 *$ ldb_db $end
$var wire 1 +$ ldb_inv_db $end
$var wire 1 ;" overflow $end
$var wire 1 ,$ sum_carry_out $end
$var wire 8 -$ sum [7:0] $end
$var wire 8 .$ SB_input [7:0] $end
$var wire 8 /$ DB_input [7:0] $end
$var reg 8 0$ a [7:0] $end
$var reg 8 1$ alu_out [7:0] $end
$var reg 8 2$ b [7:0] $end
$var reg 8 3$ bcd_buffer [7:0] $end
$var reg 1 7 carry_out $end
$var reg 4 4$ hi_nib [3:0] $end
$var reg 4 5$ lo_nib [3:0] $end
$var reg 7 6$ rot_buffer [6:0] $end
$upscope $end
$scope module aluRegister $end
$var wire 8 7$ busInputs [7:0] $end
$var wire 1 8$ busReadEnable $end
$var wire 1 ' clk $end
$var wire 8 9$ muxOutput [7:0] $end
$var wire 1 + nrst $end
$var wire 1 :$ busSelectEncoded $end
$var wire 16 ;$ busOutputs [15:0] $end
$var parameter 32 <$ BUS_SELECT_ENCODED_SIZE $end
$var parameter 32 =$ DEFAULT_VALUE $end
$var parameter 64 >$ INPUT_BIT_COUNT $end
$var parameter 32 ?$ INPUT_COUNT $end
$var parameter 64 @$ OUTPUT_BIT_COUNT $end
$var parameter 32 A$ OUTPUT_COUNT $end
$var parameter 32 B$ WIDTH $end
$var reg 8 C$ currentState [7:0] $end
$var reg 8 D$ nextState [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 E$ i $end
$upscope $end
$scope module encoder $end
$var wire 1 8$ select $end
$var wire 1 :$ encodedSelect $end
$var parameter 32 F$ INPUT_COUNT $end
$var parameter 32 G$ OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 1 H$ temp $end
$var parameter 2 I$ i $end
$scope begin genblk1[0] $end
$var parameter 2 J$ j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module bridge $end
$var wire 8 K$ bus3Input [7:0] $end
$var wire 1 L$ open1To2 $end
$var wire 1 M$ open2To1 $end
$var wire 1 N$ open2To3 $end
$var wire 1 O$ open3To2 $end
$var wire 8 P$ bus2Input [7:0] $end
$var wire 8 Q$ bus1Input [7:0] $end
$var reg 8 R$ bus1Output [7:0] $end
$var reg 8 S$ bus2Output [7:0] $end
$var reg 8 T$ bus3Output [7:0] $end
$upscope $end
$scope module dataBusModule $end
$var wire 48 U$ busInputs [47:0] $end
$var wire 8 V$ busOutput [7:0] $end
$var wire 6 W$ busSelect [5:0] $end
$var wire 3 X$ busSelectEncoded [2:0] $end
$var parameter 32 Y$ BUS_SELECT_ENCODED_SIZE $end
$var parameter 32 Z$ INPUT_COUNT $end
$var parameter 32 [$ WIDTH $end
$scope begin genblk1[0] $end
$var parameter 2 \$ i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 ]$ i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 ^$ i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 _$ i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 `$ i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 a$ i $end
$upscope $end
$scope module encoder $end
$var wire 6 b$ select [5:0] $end
$var wire 3 c$ encodedSelect [2:0] $end
$var parameter 32 d$ INPUT_COUNT $end
$var parameter 32 e$ OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 6 f$ temp [5:0] $end
$var parameter 2 g$ i $end
$scope begin genblk1[0] $end
$var parameter 2 h$ j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 i$ j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 j$ j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 k$ j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 l$ j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 m$ j $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 6 n$ temp [5:0] $end
$var parameter 2 o$ i $end
$scope begin genblk1[0] $end
$var parameter 2 p$ j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 q$ j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 r$ j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 s$ j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 t$ j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 u$ j $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 6 v$ temp [5:0] $end
$var parameter 3 w$ i $end
$scope begin genblk1[0] $end
$var parameter 2 x$ j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 y$ j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 z$ j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 {$ j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 |$ j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 }$ j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module dbPreset $end
$var wire 1 ~$ set_00 $end
$var wire 1 !% set_01 $end
$var wire 1 "% set_FA $end
$var wire 1 #% set_FB $end
$var wire 1 $% set_FC $end
$var wire 1 %% set_FD $end
$var wire 1 &% set_FE $end
$var wire 1 '% set_FF $end
$var reg 8 (% bus_out [7:0] $end
$upscope $end
$scope module dorRegister $end
$var wire 8 )% busInputs [7:0] $end
$var wire 1 *% busReadEnable $end
$var wire 1 ' clk $end
$var wire 8 +% muxOutput [7:0] $end
$var wire 1 + nrst $end
$var wire 1 ,% busSelectEncoded $end
$var wire 8 -% busOutputs [7:0] $end
$var parameter 32 .% BUS_SELECT_ENCODED_SIZE $end
$var parameter 32 /% DEFAULT_VALUE $end
$var parameter 64 0% INPUT_BIT_COUNT $end
$var parameter 32 1% INPUT_COUNT $end
$var parameter 64 2% OUTPUT_BIT_COUNT $end
$var parameter 32 3% OUTPUT_COUNT $end
$var parameter 32 4% WIDTH $end
$var reg 8 5% currentState [7:0] $end
$var reg 8 6% nextState [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 7% i $end
$upscope $end
$scope module encoder $end
$var wire 1 *% select $end
$var wire 1 ,% encodedSelect $end
$var parameter 32 8% INPUT_COUNT $end
$var parameter 32 9% OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 1 :% temp $end
$var parameter 2 ;% i $end
$scope begin genblk1[0] $end
$var parameter 2 <% j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module externalDBToADH $end
$var wire 1 =% enable $end
$var wire 8 >% interfaceInput [7:0] $end
$var reg 8 ?% interfaceOutput [7:0] $end
$upscope $end
$scope module externalDBToADL $end
$var wire 1 @% enable $end
$var wire 8 A% interfaceInput [7:0] $end
$var reg 8 B% interfaceOutput [7:0] $end
$upscope $end
$scope module externalDBToDB $end
$var wire 1 C% enable $end
$var wire 8 D% interfaceInput [7:0] $end
$var reg 8 E% interfaceOutput [7:0] $end
$upscope $end
$scope module pcIncrementor $end
$var wire 1 F% decrement $end
$var wire 1 G% increment $end
$var wire 8 H% input_highbyte [7:0] $end
$var wire 8 I% input_lowbyte [7:0] $end
$var wire 8 J% output_lowbyte [7:0] $end
$var wire 8 K% output_highbyte [7:0] $end
$var wire 16 L% address [15:0] $end
$var reg 16 M% nextAddress [15:0] $end
$upscope $end
$scope module pchRegister $end
$var wire 16 N% busInputs [15:0] $end
$var wire 2 O% busReadEnable [1:0] $end
$var wire 1 ' clk $end
$var wire 8 P% muxOutput [7:0] $end
$var wire 1 + nrst $end
$var wire 1 Q% busSelectEncoded $end
$var wire 24 R% busOutputs [23:0] $end
$var parameter 32 S% BUS_SELECT_ENCODED_SIZE $end
$var parameter 8 T% DEFAULT_VALUE $end
$var parameter 64 U% INPUT_BIT_COUNT $end
$var parameter 32 V% INPUT_COUNT $end
$var parameter 64 W% OUTPUT_BIT_COUNT $end
$var parameter 32 X% OUTPUT_COUNT $end
$var parameter 32 Y% WIDTH $end
$var reg 8 Z% currentState [7:0] $end
$var reg 8 [% nextState [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 \% i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 ]% i $end
$upscope $end
$scope module encoder $end
$var wire 2 ^% select [1:0] $end
$var wire 1 Q% encodedSelect $end
$var parameter 32 _% INPUT_COUNT $end
$var parameter 32 `% OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 2 a% temp [1:0] $end
$var parameter 2 b% i $end
$scope begin genblk1[0] $end
$var parameter 2 c% j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 d% j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pclRegister $end
$var wire 16 e% busInputs [15:0] $end
$var wire 2 f% busReadEnable [1:0] $end
$var wire 1 ' clk $end
$var wire 8 g% muxOutput [7:0] $end
$var wire 1 + nrst $end
$var wire 1 h% busSelectEncoded $end
$var wire 24 i% busOutputs [23:0] $end
$var parameter 32 j% BUS_SELECT_ENCODED_SIZE $end
$var parameter 8 k% DEFAULT_VALUE $end
$var parameter 64 l% INPUT_BIT_COUNT $end
$var parameter 32 m% INPUT_COUNT $end
$var parameter 64 n% OUTPUT_BIT_COUNT $end
$var parameter 32 o% OUTPUT_COUNT $end
$var parameter 32 p% WIDTH $end
$var reg 8 q% currentState [7:0] $end
$var reg 8 r% nextState [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 s% i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 t% i $end
$upscope $end
$scope module encoder $end
$var wire 2 u% select [1:0] $end
$var wire 1 h% encodedSelect $end
$var parameter 32 v% INPUT_COUNT $end
$var parameter 32 w% OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 2 x% temp [1:0] $end
$var parameter 2 y% i $end
$scope begin genblk1[0] $end
$var parameter 2 z% j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 {% j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module psr $end
$var wire 1 |% DB0_C $end
$var wire 1 }% DB1_Z $end
$var wire 1 ~% DB2_I $end
$var wire 1 !& DB3_D $end
$var wire 1 "& DB6_V $end
$var wire 1 #& DB7_N $end
$var wire 8 $& DB_in [7:0] $end
$var wire 1 %& DBall_Z $end
$var wire 8 && PSR_RCL [7:0] $end
$var wire 1 '& break_set $end
$var wire 1 7 carry $end
$var wire 1 (& carry_C $end
$var wire 1 ' clk $end
$var wire 1 )& enableDBWrite $end
$var wire 1 *& manual_C $end
$var wire 1 +& manual_D $end
$var wire 1 ,& manual_I $end
$var wire 1 -& manual_set $end
$var wire 1 + nrst $end
$var wire 1 ;" overflow $end
$var wire 1 .& overflow_V $end
$var wire 1 /& rcl_V $end
$var wire 8 0& internalFFOutput [7:0] $end
$var wire 8 1& internalFFInput [7:0] $end
$var wire 8 2& PSR_DB [7:0] $end
$scope module inputInterface $end
$var wire 1 3& enable $end
$var wire 8 4& interfaceInput [7:0] $end
$var reg 8 5& interfaceOutput [7:0] $end
$upscope $end
$scope module outputInterface $end
$var wire 1 )& enable $end
$var wire 8 6& interfaceInput [7:0] $end
$var reg 8 7& interfaceOutput [7:0] $end
$upscope $end
$scope module processStatusReg $end
$var wire 1 |% DB0_C $end
$var wire 1 }% DB1_Z $end
$var wire 1 ~% DB2_I $end
$var wire 1 !& DB3_D $end
$var wire 1 "& DB6_V $end
$var wire 1 #& DB7_N $end
$var wire 8 8& DB_in [7:0] $end
$var wire 1 %& DBall_Z $end
$var wire 1 '& break_set $end
$var wire 1 7 carry $end
$var wire 1 (& carry_C $end
$var wire 1 ' clk $end
$var wire 1 *& manual_C $end
$var wire 1 +& manual_D $end
$var wire 1 ,& manual_I $end
$var wire 1 -& manual_set $end
$var wire 1 + nrst $end
$var wire 1 ;" overflow $end
$var wire 1 .& overflow_V $end
$var wire 1 /& rcl_V $end
$var wire 8 9& stat_buf_nxt [7:0] $end
$var wire 8 :& PSR_Output [7:0] $end
$var reg 8 ;& status_buffer [7:0] $end
$upscope $end
$upscope $end
$scope module sbPreset $end
$var wire 1 <& set_00 $end
$var wire 1 =& set_01 $end
$var wire 1 >& set_FA $end
$var wire 1 ?& set_FB $end
$var wire 1 @& set_FC $end
$var wire 1 A& set_FD $end
$var wire 1 B& set_FE $end
$var wire 1 C& set_FF $end
$var reg 8 D& bus_out [7:0] $end
$upscope $end
$scope module stackBusModule $end
$var wire 48 E& busInputs [47:0] $end
$var wire 8 F& busOutput [7:0] $end
$var wire 6 G& busSelect [5:0] $end
$var wire 3 H& busSelectEncoded [2:0] $end
$var parameter 32 I& BUS_SELECT_ENCODED_SIZE $end
$var parameter 32 J& INPUT_COUNT $end
$var parameter 32 K& WIDTH $end
$scope begin genblk1[0] $end
$var parameter 2 L& i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 M& i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 N& i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 O& i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 P& i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 Q& i $end
$upscope $end
$scope module encoder $end
$var wire 6 R& select [5:0] $end
$var wire 3 S& encodedSelect [2:0] $end
$var parameter 32 T& INPUT_COUNT $end
$var parameter 32 U& OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 6 V& temp [5:0] $end
$var parameter 2 W& i $end
$scope begin genblk1[0] $end
$var parameter 2 X& j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 Y& j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 Z& j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 [& j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 \& j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 ]& j $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 6 ^& temp [5:0] $end
$var parameter 2 _& i $end
$scope begin genblk1[0] $end
$var parameter 2 `& j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 a& j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 b& j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 c& j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 d& j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 e& j $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 6 f& temp [5:0] $end
$var parameter 3 g& i $end
$scope begin genblk1[0] $end
$var parameter 2 h& j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 i& j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 j& j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 k& j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 l& j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 m& j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module stackPointerRegister $end
$var wire 8 n& busInputs [7:0] $end
$var wire 1 o& busReadEnable $end
$var wire 1 ' clk $end
$var wire 8 p& muxOutput [7:0] $end
$var wire 1 + nrst $end
$var wire 1 q& busSelectEncoded $end
$var wire 16 r& busOutputs [15:0] $end
$var parameter 32 s& BUS_SELECT_ENCODED_SIZE $end
$var parameter 32 t& DEFAULT_VALUE $end
$var parameter 64 u& INPUT_BIT_COUNT $end
$var parameter 32 v& INPUT_COUNT $end
$var parameter 64 w& OUTPUT_BIT_COUNT $end
$var parameter 32 x& OUTPUT_COUNT $end
$var parameter 32 y& WIDTH $end
$var reg 8 z& currentState [7:0] $end
$var reg 8 {& nextState [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 |& i $end
$upscope $end
$scope module encoder $end
$var wire 1 o& select $end
$var wire 1 q& encodedSelect $end
$var parameter 32 }& INPUT_COUNT $end
$var parameter 32 ~& OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 1 !' temp $end
$var parameter 2 "' i $end
$scope begin genblk1[0] $end
$var parameter 2 #' j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module xRegister $end
$var wire 8 $' busInputs [7:0] $end
$var wire 1 %' busReadEnable $end
$var wire 1 ' clk $end
$var wire 8 &' muxOutput [7:0] $end
$var wire 1 + nrst $end
$var wire 1 '' busSelectEncoded $end
$var wire 8 (' busOutputs [7:0] $end
$var parameter 32 )' BUS_SELECT_ENCODED_SIZE $end
$var parameter 8 *' DEFAULT_VALUE $end
$var parameter 64 +' INPUT_BIT_COUNT $end
$var parameter 32 ,' INPUT_COUNT $end
$var parameter 64 -' OUTPUT_BIT_COUNT $end
$var parameter 32 .' OUTPUT_COUNT $end
$var parameter 32 /' WIDTH $end
$var reg 8 0' currentState [7:0] $end
$var reg 8 1' nextState [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 2' i $end
$upscope $end
$scope module encoder $end
$var wire 1 %' select $end
$var wire 1 '' encodedSelect $end
$var parameter 32 3' INPUT_COUNT $end
$var parameter 32 4' OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 1 5' temp $end
$var parameter 2 6' i $end
$scope begin genblk1[0] $end
$var parameter 2 7' j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module yRegister $end
$var wire 8 8' busInputs [7:0] $end
$var wire 1 9' busReadEnable $end
$var wire 1 ' clk $end
$var wire 8 :' muxOutput [7:0] $end
$var wire 1 + nrst $end
$var wire 1 ;' busSelectEncoded $end
$var wire 8 <' busOutputs [7:0] $end
$var parameter 32 =' BUS_SELECT_ENCODED_SIZE $end
$var parameter 8 >' DEFAULT_VALUE $end
$var parameter 64 ?' INPUT_BIT_COUNT $end
$var parameter 32 @' INPUT_COUNT $end
$var parameter 64 A' OUTPUT_BIT_COUNT $end
$var parameter 32 B' OUTPUT_COUNT $end
$var parameter 32 C' WIDTH $end
$var reg 8 D' currentState [7:0] $end
$var reg 8 E' nextState [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 F' i $end
$upscope $end
$scope module encoder $end
$var wire 1 9' select $end
$var wire 1 ;' encodedSelect $end
$var parameter 32 G' INPUT_COUNT $end
$var parameter 32 H' OUTPUT_SIZE $end
$scope begin genblk1[0] $end
$var wire 1 I' temp $end
$var parameter 2 J' i $end
$scope begin genblk1[0] $end
$var parameter 2 K' j $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope task reset_dut $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b0 K'
b0 J'
b1 H'
b1 G'
b0 F'
b1000 C'
b1 B'
b1000 A'
b1 @'
b1000 ?'
b0 >'
b1 ='
b0 7'
b0 6'
b1 4'
b1 3'
b0 2'
b1000 /'
b1 .'
b1000 -'
b1 ,'
b1000 +'
b0 *'
b1 )'
b0 #'
b0 "'
b1 ~&
b1 }&
b0 |&
b1000 y&
b10 x&
b10000 w&
b1 v&
b1000 u&
b0 t&
b1 s&
b101 m&
b100 l&
b11 k&
b10 j&
b1 i&
b0 h&
b10 g&
b101 e&
b100 d&
b11 c&
b10 b&
b1 a&
b0 `&
b1 _&
b101 ]&
b100 \&
b11 [&
b10 Z&
b1 Y&
b0 X&
b0 W&
b11 U&
b110 T&
b101 Q&
b100 P&
b11 O&
b10 N&
b1 M&
b0 L&
b1000 K&
b110 J&
b11 I&
b1 {%
b0 z%
b0 y%
b1 w%
b10 v%
b1 t%
b0 s%
b1000 p%
b11 o%
b11000 n%
b10 m%
b10000 l%
b10111011 k%
b1 j%
b1 d%
b0 c%
b0 b%
b1 `%
b10 _%
b1 ]%
b0 \%
b1000 Y%
b11 X%
b11000 W%
b10 V%
b10000 U%
b10101010 T%
b1 S%
b0 <%
b0 ;%
b1 9%
b1 8%
b0 7%
b1000 4%
b1 3%
b1000 2%
b1 1%
b1000 0%
b0 /%
b1 .%
b101 }$
b100 |$
b11 {$
b10 z$
b1 y$
b0 x$
b10 w$
b101 u$
b100 t$
b11 s$
b10 r$
b1 q$
b0 p$
b1 o$
b101 m$
b100 l$
b11 k$
b10 j$
b1 i$
b0 h$
b0 g$
b11 e$
b110 d$
b101 a$
b100 `$
b11 _$
b10 ^$
b1 ]$
b0 \$
b1000 [$
b110 Z$
b11 Y$
b0 J$
b0 I$
b1 G$
b1 F$
b0 E$
b1000 B$
b10 A$
b10000 @$
b1 ?$
b1000 >$
b0 =$
b1 <$
b100 b#
b11 a#
b10 `#
b1 _#
b0 ^#
b10 ]#
b100 [#
b11 Z#
b10 Y#
b1 X#
b0 W#
b1 V#
b100 T#
b11 S#
b10 R#
b1 Q#
b0 P#
b0 O#
b11 M#
b101 L#
b100 I#
b11 H#
b10 G#
b1 F#
b0 E#
b1000 D#
b101 C#
b11 B#
b10 =#
b1 <#
b0 ;#
b1 :#
b10 8#
b1 7#
b0 6#
b0 5#
b10 3#
b11 2#
b10 /#
b1 .#
b0 -#
b1000 ,#
b11 +#
b10 *#
b0 %#
b0 $#
b1 "#
b1 !#
b0 ~"
b1000 {"
b10 z"
b10000 y"
b1 x"
b1000 w"
b0 v"
b1 u"
b0 o"
b0 n"
b1 l"
b1 k"
b0 j"
b1000 g"
b1 f"
b1000 e"
b1 d"
b1000 c"
b0 b"
b1 a"
b0 ["
b0 Z"
b1 X"
b1 W"
b0 V"
b1000 S"
b1 R"
b1000 Q"
b1 P"
b1000 O"
b0 N"
b1 M"
b10 $
$end
#0
$dumpvars
0I'
bx E'
bx D'
bx <'
0;'
b0 :'
09'
b0 8'
05'
bx 1'
bx 0'
bx ('
0''
b0 &'
0%'
b0 $'
0!'
bx {&
bx z&
bx r&
0q&
b0 p&
0o&
b0 n&
b0 f&
b0 ^&
b0 V&
b0 S&
b0 R&
b0 H&
b0 G&
b0 F&
bx00000000 E&
b0 D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
bx ;&
bx00xxxx :&
bxzzxxxx 9&
b0 8&
b0 7&
bx00xxxx 6&
b0 5&
b0 4&
13&
b0 2&
b0 1&
bx00xxxx 0&
0/&
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
bx00xxxx &&
0%&
b0 $&
0#&
0"&
0!&
0~%
0}%
0|%
b10 x%
b10 u%
bx r%
bx q%
bx i%
1h%
bx g%
b10 f%
bx00000000 e%
b10 a%
b10 ^%
bx [%
bx Z%
bx R%
1Q%
bx P%
b10 O%
bx00000000 N%
bx M%
bx L%
bx K%
bx J%
bx I%
bx H%
0G%
0F%
b0 E%
bx D%
0C%
b0 B%
bx A%
0@%
b0 ?%
bx >%
0=%
0:%
bx 6%
bx 5%
bx -%
0,%
b0 +%
0*%
b0 )%
b0 (%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
b0 v$
b0 n$
b0 f$
b0 c$
b0 b$
b0 X$
b0 W$
b0 V$
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000 U$
b0 T$
b0 S$
b0 R$
b0 Q$
b0 P$
0O$
0N$
0M$
0L$
b0 K$
0H$
bx D$
bx C$
bx ;$
0:$
b0 9$
08$
b0 7$
b0 6$
b0 5$
b0 4$
b0 3$
b0 2$
b0 1$
b0 0$
b0 /$
b0 .$
b0 -$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
b0 }#
b0 |#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
b0 s#
b0 r#
b0 q#
b0 p#
b0 o#
b0 n#
0m#
0l#
b0 k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
b0 \#
b0 U#
b0 N#
b0 K#
b0 J#
b0 A#
b0 @#
b0 ?#
bx00000000 >#
b0 9#
b0 4#
b0 1#
b0 0#
b0 )#
b0 (#
b0 '#
bx00000000 &#
0##
bx }"
bx |"
b0 t"
bx s"
0r"
b0 q"
0p"
0m"
bx i"
bx h"
b0 `"
bx _"
0^"
b0 ]"
0\"
0Y"
bx U"
bx T"
b0 L"
bx K"
0J"
b0 I"
0H"
bx G"
bx F"
bx E"
bx D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
0;"
bx :"
bx 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
02"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
b0 ("
bx00xxxx '"
b0 &"
0%"
b0 $"
b0 #"
bx ""
bx !"
bx ~
bx }
b0 |
bx {
bx z
bx y
bx x
0w
0v
xu
xt
0s
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
bx e
xd
xc
xb
xa
bx `
x_
x^
0]
bx \
b0 [
xZ
bx Y
bx X
bx W
bx V
0U
b11001 T
b10 S
0R
b0 Q
0P
0O
0N
bx M
bx L
xK
bx J
b11001 I
b10 H
xG
xF
xE
xD
xC
xB
b11001 A
b10 @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx00xxxx 9
b10 8
07
bx 6
b0 5
x4
03
02
b11001 1
x0
bx /
x.
bx -
b101001001100101011100110110010101110100 ,
x+
x*
x)
bx (
0'
bx &
bx %
bx #
bx "
bx !
$end
#100
b10111011 r%
b10101010 [%
b101 8
b101 @
b101 H
b101 S
b1011 1
b1011 A
b1011 I
b1011 T
b10111011 g%
b10101010 P%
b0 =
b0 >
b0 ?
b1011101100000000 e%
b10111011 /"
b10111011 J%
b1010101000000000 N%
b10101010 0"
b10101010 K%
b0zz0000 9&
0G
0F
b0 /
b0 <
b0 e
13
1_
b1010101010111011 M%
0D
0C
0E
0B
0a
0^
b101 X
b1011 Y
0Z
1u
1b
0h
1R
0m
0n
0g
0j
0f
0p
b0 1'
b0 E'
b0 U"
b0 i"
b10101010 ,"
b10101010 H%
b10101010 -"
b10101010xxxxxxxx00000000 &#
b10101010 ."
b1010101010111011 L%
b10111011 )"
b10111011 I%
b10111011 *"
b10111011 +"
b0 {&
b0 ""
b0 !"
b0 D$
b0 9"
b10111011xxxxxxxx00000000 >#
b0 :"
b0 }"
b0 D"
b101010101011101100000000xxxxxxxx00000000 U$
b0 E"
b0 6%
b0 9
b0 '"
b0 &&
b0 0&
b0 6&
b0 :&
04
b0 M
b0 V
b0 L
b0 W
b0 J
b0 \
1K
0.
1t
0d
00
0c
0l
0k
0r
0q
b0 ~
b0 ('
b0 0'
b0 E&
b0 }
b0 <'
b0 D'
b0 #
b0 ;
b0 x
b0 G"
b0 K"
b0 T"
b0 "
b0 :
b0 y
b0 F"
b0 _"
b0 h"
b101010101010101010101010 R%
b10101010 Z%
b101110111011101110111011 i%
b10111011 q%
b0 r&
b0 z&
b0 ;$
b0 C$
b0 s"
b0 |"
b0 !
b0 6
b0 {
b0 1"
b0 -%
b0 5%
b0 ;&
0+
b1000010011011110110111101110100001000000101010101110000001000000111001101100101011100010111010101100101011011100110001101100101001000000101001001100101011100110110010101110100 ,
1'
#200
0'
#300
1'
#400
0'
#500
1'
#600
1+
0'
#700
1;"
b11111111 D$
b1010101000000001 N%
b1 ?"
b1 p#
b11111111 9$
b11111111 <"
b11111111 1$
b11111111 7$
b11111111 -$
b100000000 s#
b1 U"
b10101010 6%
b11111111 0$
b10101010 1&
b10101010 5&
b100000000 r#
b1 I"
b1 C"
b1 L"
b1 q#
b1 T$
b11111111 p&
b11111111 &'
b11111111 :'
b11111111 q"
b11111111 $"
b11111111 t"
b11111111 .$
b11111111 S$
b11111111 n&
b11111111 $'
b11111111 8'
b10101010 +%
b10101010 8"
b10101010 /$
b10101010 R$
b10101010 )%
b10101010 $&
b10101010 4&
b10101010 8&
b10101010 7"
b10101010 Q$
b10101010 V$
b100 X$
b100 c$
b10000 v$
b11111111 #"
b11111111 P$
b11111111 F&
b100 A#
b100 K#
b10000 \#
b1 B"
b1 '#
b1 K$
b10 8
b10 @
b10 H
b10 S
b11001 1
b11001 A
b11001 I
b11001 T
b11111111 E&
b11111111 &"
b11111111 D&
b10101010xxxxxxxx00000001 &#
b1 @"
b1 k#
b1 (#
b1 0#
1v
b1 [
bx =
bx >
bx ?
1*%
b10000 W$
b10000 b$
18$
1%$
1)$
1'$
1C&
b1 G&
b1 R&
1%"
1\"
b10000 @#
b10000 J#
1H"
1d#
03
bx /
bx <
bx e
0_
0Z
b100000010000000010000000010000000110000000000000000000100001000010000000001100 5
b100000010000000010000000010000000110000000000000000000100001000010000000001100 Q
b100000010000000010000000010000000110000000000000000000100001000010000000001100 |
0u
0b
xj
xp
b101 M
b101 V
b1011 L
b1011 W
0K
1.
0t
xk
xq
b0zz0000 ;&
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110001 ,
1'
#800
0'
#900
0;"
17
b11111110 D$
b1011101111111111 e%
b11111111 >"
b11111111 o#
b1010101000000000 N%
b0 ?"
b0 p#
1,$
b11111110 9$
b11111110 <"
b11111110 1$
b11111110 7$
b11111110 -$
b10111011 6%
b10111011 1&
b10111011 5&
b11111111 s#
b11111111 i"
b11111111 2$
b11111111 0$
b0 I"
b0 C"
b0 L"
b0 q#
b0 T$
b10111011 +%
b10111011 8"
b10111011 /$
b10111011 R$
b10111011 )%
b10111011 $&
b10111011 4&
b10111011 8&
b1000 f$
b1000 n$
b1000 N#
b11111111 r#
b11111111 ]"
b11111111 A"
b11111111 `"
b11111111 ?#
b11111111 n#
b11111111 }#
b1000 U#
b10111011 7"
b10111011 Q$
b10111011 V$
b11 X$
b11 c$
b0 v$
b11 A#
b11 K#
b0 \#
b0 B"
b0 '#
b0 K$
b10101010xxxxxxxx00000000 &#
b0 @"
b0 k#
b0 (#
b0 0#
0v
b1000 W$
b1000 b$
b1000 @#
b1000 J#
0H"
0d#
xh
xm
b10 [
b10000000000010000000010000000011000000000000000000100001000010100000000100 5
b10000000000010000000010000000011000000000000000000100001000010100000000100 Q
b10000000000010000000010000000011000000000000000000100001000010100000000100 |
xg
xf
b111111110000000011111111 E&
b11111111 9"
b1111111110111011xxxxxxxx00000000 >#
b11111111 :"
b1 J
b1 \
0.
xl
xr
b1 #
b1 ;
b1 x
b1 G"
b1 K"
b1 T"
b1111111111111111 ;$
b11111111 C$
b10101010 !
b10101010 6
b10101010 {
b10101010 1"
b10101010 -%
b10101010 5%
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110010 ,
1'
#1000
0'
#1100
b110000 6%
b110000 1&
b110000 5&
b110000 +%
b110000 8"
b110000 /$
b110000 R$
b110000 )%
b110000 $&
b110000 4&
b110000 8&
b11111101 D$
b100000 v$
b100000 f$
b110000 7"
b110000 Q$
b110000 V$
b101 X$
b101 c$
b0 n$
b1011101111111110 e%
b11111110 >"
b11111110 o#
17
b11111101 9$
b11111101 <"
b11111101 1$
b11111101 7$
b11111101 -$
b110000101010101011101100000000xxxxxxxx00000000 U$
b110000 ("
b110000 2&
b110000 7&
b11111110 s#
b11111110 i"
b11111110 2$
b11111111 0$
b110000 9
b110000 '"
b110000 &&
b110000 0&
b110000 6&
b110000 :&
1'&
1)&
b100000 W$
b100000 b$
b11111110 r#
b11111110 ]"
b11111110 A"
b11111110 `"
b11111110 ?#
b11111110 n#
b11111110 }#
b11 [
b100000000011000000010000000011000000000000000000100001000010100000000100 5
b100000000011000000010000000011000000000000000000100001000010100000000100 Q
b100000000011000000010000000011000000000000000000100001000010100000000100 |
b111111100000000011111111 E&
b11111110 9"
b1111111010111011xxxxxxxx00000000 >#
b11111110 :"
b10 J
b10 \
xd
xc
b10111011 !
b10111011 6
b10111011 {
b10111011 1"
b10111011 -%
b10111011 5%
b1111111011111110 ;$
b11111110 C$
b11111111 "
b11111111 :
b11111111 y
b11111111 F"
b11111111 _"
b11111111 h"
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110011 ,
1'
#1200
0'
#1300
1w
b1010101011111111 N%
b11111111 ?"
b11111111 p#
b0 1&
b0 5&
b11111111 I"
b11111111 C"
b11111111 L"
b11111111 q#
b11111111 T$
b11111101 p&
b11111101 &'
b11111101 :'
b11111101 q"
b11111101 $"
b11111101 t"
b11111101 .$
b11111101 S$
b11111101 n&
b11111101 $'
b11111101 8'
b0 +%
b0 8"
b0 /$
b0 R$
b0 )%
b0 $&
b0 4&
b0 8&
0;"
b10 H&
b10 S&
b100 ^&
b11111111 B"
b11111111 '#
b11111111 K$
b1 (#
b1 0#
1v
b0 f$
b0 X$
b0 c$
b0 v$
b0 N#
b0 A#
b0 K#
b0 U#
b0 7"
b0 Q$
b0 V$
b11111101 #"
b11111101 P$
b11111101 F&
b1011101111111110 e%
b11111110 >"
b11111110 o#
b0 -$
0,$
b11111101 {&
b11111110 ="
b11111110 |#
b11111111 U"
b10101010xxxxxxxx11111111 &#
b11111111 @"
b11111111 k#
07
b0 9$
b0 <"
b0 1$
b0 7$
b101010101011101100000000xxxxxxxx00000000 U$
b0 ("
b0 2&
b0 7&
b0 &"
b0 D&
b1111111111111110 s#
b11111110 i"
b0 2$
b0 0$
1o&
1z#
1H"
1j#
b0 W$
b0 b$
b1 @#
b1 J#
08$
0*%
0)$
0'$
0%$
b0 9
b0 '"
b0 &&
b0 0&
b0 6&
b0 :&
0'&
0)&
0C&
b100 G&
b100 R&
0%"
b1111111111111110 r#
b11111110 ]"
b11111110 A"
b11111110 `"
b11111110 ?#
b11111110 n#
b11111110 }#
b100 [
b1000001000000000000000000001000001000000000000000000100000000000001100 5
b1000001000000000000000000001000001000000000000000000100000000000001100 Q
b1000001000000000000000000001000001000000000000000000100000000000001100 |
b111111010000000000000000 E&
b11111101 9"
b1111110110111011xxxxxxxx11111110 >#
b11111101 :"
b11 J
b11 \
b11111110 "
b11111110 :
b11111110 y
b11111110 F"
b11111110 _"
b11111110 h"
b1111110111111101 ;$
b11111101 C$
b110000 !
b110000 6
b110000 {
b110000 1"
b110000 -%
b110000 5%
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110100 ,
1'
#1400
0'
#1500
x;"
x7
bx 9$
bx <"
bx 1$
bx 7$
bx -$
x,$
bx 2$
bx 1&
bx 5&
b1011101111111111 e%
b11111111 >"
b11111111 o#
b0 p&
b0 &'
b0 :'
b0 q"
b0 $"
b0 t"
b0 .$
b0 S$
b0 n&
b0 $'
b0 8'
bx +%
bx 8"
bx /$
bx R$
bx )%
bx $&
bx 4&
bx 8&
b1111111111111111 s#
b11111111 i"
bx 7"
bx Q$
bx V$
b1 X$
b1 c$
b10 f$
b0 #"
b0 P$
b0 F&
b0 H&
b0 S&
b0 ^&
b1111111111111111 r#
b11111111 ]"
b11111111 A"
b11111111 `"
b11111111 ?#
b11111111 n#
b11111111 }#
bx D$
bx 4"
bx E%
b11111111 ="
b11111111 |#
18$
1%$
1($
1*$
b10 W$
b10 b$
1C%
1{#
b0 G&
b0 R&
0o&
0z#
b101 [
b1000000100000000000000000000000000000000000000100011000000001100001100 5
b1000000100000000000000000000000000000000000000100011000000001100001100 Q
b1000000100000000000000000000000000000000000000100011000000001100001100 |
b111111011111110110111011xxxxxxxx11111111 >#
b11111101 ""
b11111101111111010000000000000000 E&
b11111101 !"
b100 J
b100 \
b1111110111111101 r&
b11111101 z&
b11111111 #
b11111111 ;
b11111111 x
b11111111 G"
b11111111 K"
b11111111 T"
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110101 ,
1'
#1600
1;"
b11011101 D$
07
b11011101 9$
b11011101 <"
b11011101 1$
b11011101 7$
b11011101 -$
0,$
b10 8
b10 @
b10 H
b10 S
b10010 1
b10010 A
b10010 I
b10010 T
b11011101 2$
b11011101 1&
b11011101 5&
b1 =
b111 >
b110 ?
b11011101 +%
b11011101 8"
b11011101 /$
b11011101 R$
b11011101 )%
b11011101 $&
b11011101 4&
b11011101 8&
b11011101 /
b11011101 <
b11011101 e
b11011101 7"
b11011101 Q$
b11011101 V$
b11011101 4"
b11011101 E%
b1010101010111011000000001101110100000000 U$
b1111110111111101101110111101110111111111 >#
b101010101101110111111111 &#
b11011101 (
b11011101 -
b11011101 `
b11011101 z
b11011101 >%
b11011101 A%
b11011101 D%
0'
#1700
0w
b11011101 [%
b11011110 r%
0;"
b11011101 U"
b0 1&
b0 5&
b11011101 P%
0Q%
b0 a%
b11011110 g%
0h%
b0 x%
b11011101 i"
b11011101 I"
b11011101 C"
b11011101 L"
b11011101 q#
b11011101 T$
b0 +%
b0 8"
b0 /$
b0 R$
b0 )%
b0 $&
b0 4&
b0 8&
b10111100 /"
b10111100 J%
b1011110011011110 e%
b11011110 >"
b11011110 o#
b1010101011011101 N%
b11011101 ?"
b11011101 p#
b1 )#
b1 1#
b10 4#
b1000 N#
b11 A#
b11 K#
b1000 U#
b0 7"
b0 Q$
b0 V$
b0 X$
b0 c$
b0 f$
b0 -$
b1101110111011101 r#
b11011101 ]"
b11011101 A"
b11011101 `"
b11011101 ?#
b11011101 n#
b11011101 }#
b11011101 B"
b11011101 '#
b11011101 K$
0v
b1010101010111100 M%
b1101110111011110 s#
b11011101 6"
b11011101 ?%
b0 2$
b0 9$
b0 <"
b0 1$
b0 7$
b0 ="
b0 |#
b101010101101110100000000 &#
b0 @"
b0 k#
b0 4"
b0 E%
1G%
1m#
b1 O%
b1 ^%
b1 f%
b1 u%
b10 (#
b10 0#
1=%
b1000 @#
b1000 J#
b0 W$
b0 b$
08$
0*$
0($
0%$
0{#
0j#
0C%
b110 [
b1000000000000000000000001000000000100000011100 5
b1000000000000000000000001000000000100000011100 Q
b1000000000000000000000001000000000100000011100 |
b11111101110111010000000000000000 E&
b11011101 9"
b1111110111011101101110111101110100000000 >#
b11011101 :"
b101 J
b101 \
b11111111 "
b11111111 :
b11111111 y
b11111111 F"
b11111111 _"
b11111111 h"
b1101110111011101 ;$
b11011101 C$
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110110 ,
1'
#1800
b11001100 [%
b11001100 P%
b1010101011001100 N%
b11001100 ?"
b11001100 p#
b1 8
b1 @
b1 H
b1 S
b10100 1
b10100 A
b10100 I
b10100 T
b1100110011011110 s#
b11001100 U"
b0 =
b11 >
b1100110011011101 r#
b11001100 I"
b11001100 C"
b11001100 L"
b11001100 q#
b11001100 T$
b11001100 /
b11001100 <
b11001100 e
b11001100 B"
b11001100 '#
b11001100 K$
b11001100 6"
b11001100 ?%
b1010101010111011000000001100110000000000 U$
b1111110111011101101110111100110000000000 >#
b101010101100110000000000 &#
b11001100 (
b11001100 -
b11001100 `
b11001100 z
b11001100 >%
b11001100 A%
b11001100 D%
0'
#1900
b11011111 >"
b11011111 o#
b11011111 r%
x_
b1100110011011111 s#
b11011110 i"
1Q%
b10 a%
b11011111 g%
1h%
b10 x%
b1 X
b10100 Y
1Z
b100 9#
b0 N#
b1100110011011110 r#
b11011110 ]"
b11011110 A"
b11011110 `"
b11011110 ?#
b11011110 n#
b11011110 }#
b10 A#
b10 K#
b100 U#
b11001100 B"
b11001100 '#
b11001100 K$
b10 )#
b10 1#
b0 4#
13
b0 6"
b0 ?%
b1101111111011111 e%
b11011111 /"
b11011111 J%
b1100110011001100 N%
b11001100 0"
b11001100 K%
12
b100 @#
b100 J#
b100 (#
b100 0#
b10 O%
b10 ^%
b10 f%
b10 u%
0=%
b1100110011011111 M%
b0 [
b10000000000000000000000000000000000000000000000000000000000000000000000000011011100 5
b10000000000000000000000000000000000000000000000000000000000000000000000000011011100 Q
b10000000000000000000000000000000000000000000000000000000000000000000000000011011100 |
b11011110 )"
b11011110 I%
b11011110 *"
b1111110111011101110111101100110000000000 >#
b11011110 +"
b1100110011011110 L%
b11001100 ,"
b11001100 H%
b1100110011011110000000001100110000000000 U$
b11001100 -"
b110011001100110000000000 &#
b11001100 ."
b110 J
b110 \
b110111101101111011011110 i%
b11011110 q%
b110011001100110011001100 R%
b11001100 Z%
b11011101 "
b11011101 :
b11011101 y
b11011101 F"
b11011101 _"
b11011101 h"
b11001100 #
b11001100 ;
b11001100 x
b11001100 G"
b11001100 K"
b11001100 T"
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110111 ,
1'
#2000
b101 X
b100100 Y
b101 8
b101 @
b101 H
b101 S
b100100 1
b100100 A
b100100 I
b100100 T
b10 >
b10 ?
b1001000 /
b1001000 <
b1001000 e
b1100110011011110000000000100100000000000 U$
b1111110111011101110111100100100000000000 >#
b110011000100100000000000 &#
b1001000 (
b1001000 -
b1001000 `
b1001000 z
b1001000 >%
b1001000 A%
b1001000 D%
b100111001100101011110000111010000100000010011110111000001100011011011110110010001100101 ,
0'
#2100
b1100110000000001 N%
b1 ?"
b1 p#
b1 U"
0_
b1 I"
b1 C"
b1 L"
b1 q#
b1 T$
b11011110 r%
b10 X$
b10 c$
b100 n$
b10000 \#
b100 A#
b100 K#
b0 U#
b1 B"
b1 '#
b1 K$
b0 )#
b0 1#
b0 9#
b11011110 g%
b11111100 >"
b11111100 o#
b0 6%
b110011000100100000000001 &#
b1 @"
b1 k#
1v
03
b1101111011111100 e%
b11011110 /"
b11011110 J%
b111111100 s#
b11111101 i"
1*%
b110000 9
b110000 '"
b110000 &&
b110000 0&
b110000 6&
b110000 :&
1'&
b100 W$
b100 b$
1d#
1F%
1l#
02
b10000 @#
b10000 J#
b1 (#
b1 0#
0G%
0m#
b1100110011011110 M%
b111111101 r#
b11111101 ]"
b11111101 A"
b11111101 `"
b11111101 ?#
b11111101 n#
b11111101 }#
0Z
b100000000000000001000000000000000110000000001000000000000000000000000000101100 5
b100000000000000001000000000000000110000000001000000000000000000000000000101100 Q
b100000000000000001000000000000000110000000001000000000000000000000000000101100 |
b1100110011011111 L%
b11011111 )"
b11011111 I%
b1100110011011111000000000100100000000000 U$
b11011111 *"
b1111110111011101110111110100100000000000 >#
b11011111 +"
b100100 L
b100100 W
b0 J
b0 \
1K
b11011110 "
b11011110 :
b11011110 y
b11011110 F"
b11011110 _"
b11011110 h"
b110111111101111111011111 i%
b11011111 q%
1'
#2200
0'
#2300
b11011101 r%
b11011101 g%
b1101110111111100 e%
b11011101 /"
b11011101 J%
b1100110011011101 M%
b1 [
b100000000000000001000000000000000110000000001000000000000000000000000000101100 5
b100000000000000001000000000000000110000000001000000000000000000000000000101100 Q
b100000000000000001000000000000000110000000001000000000000000000000000000101100 |
b1100110011011110 L%
b11011110 )"
b11011110 I%
b1100110011011110000000000100100000000000 U$
b11011110 *"
b1111110111011101110111100100100000000000 >#
b11011110 +"
0K
b0 !
b0 6
b0 {
b0 1"
b0 -%
b0 5%
b110111101101111011011110 i%
b11011110 q%
b11111101 "
b11111101 :
b11111101 y
b11111101 F"
b11111101 _"
b11111101 h"
b1 #
b1 ;
b1 x
b1 G"
b1 K"
b1 T"
1'
#2400
0'
#2500
17
b1100110011001100 N%
b11001100 ?"
b11001100 p#
1,$
b11111100 9$
b11111100 <"
b11111100 1$
b11111100 7$
b11111100 -$
b11001100 U"
b11111111 1&
b11111111 5&
b11011101 i"
b11111101 0$
b11111111 2$
b11001100 I"
b11001100 C"
b11001100 L"
b11001100 q#
b11001100 T$
b11111101 p&
b11111101 &'
b11111101 :'
b11111101 q"
b11111101 $"
b11111101 t"
b11111101 .$
b11111101 S$
b11111101 n&
b11111101 $'
b11111101 8'
b11111111 +%
b11111111 8"
b11111111 /$
b11111111 R$
b11111111 )%
b11111111 $&
b11111111 4&
b11111111 8&
b11011110 r%
b11111111 7"
b11111111 Q$
b11111111 V$
b1000 V&
b11111101 #"
b11111101 P$
b11111101 F&
b11 H&
b11 S&
b1000 ^&
b100 U#
b10 )#
b10 1#
b100 9#
b0 X$
b0 c$
b0 n$
b1100110011011101 r#
b11011101 ]"
b11011101 A"
b11011101 `"
b11011101 ?#
b11011101 n#
b11011101 }#
b10 A#
b10 K#
b0 \#
b11011110 >"
b11011110 o#
b11001100 B"
b11001100 '#
b11001100 K$
b11011110 g%
b11111100 D$
b11111111 3"
b11111111 (%
b1100110011011110 s#
b110011000100100000000000 &#
b0 @"
b0 k#
0v
b1101111011011110 e%
b11011110 /"
b11011110 J%
18$
1%$
1*$
1'%
12"
1'$
b1000 G&
b1000 R&
b100 (#
b100 0#
1G%
1m#
b1 W$
b1 b$
b100 @#
b100 J#
0*%
0F%
0l#
b0 9
b0 '"
b0 &&
b0 0&
b0 6&
b0 :&
0'&
0d#
b1100110011011110 M%
b10 [
b1000000010100000000100001000010001011011100 5
b1000000010100000000100001000010001011011100 Q
b1000000010100000000100001000010001011011100 |
b1100110011011101 L%
b11011101 )"
b11011101 I%
b1100110011011101000000000100100011111111 U$
b11011101 *"
b1111110111011101110111010100100000000000 >#
b11011101 +"
b1 J
b1 \
b110111011101110111011101 i%
b11011101 q%
1'
#2600
b10001100110100101101110011010010111001101101000011010010110111001100111 ,
0'
#2700
b11111100 {&
b0 1&
b0 5&
x_
b11111100 p&
b11111100 &'
b11111100 :'
b11111100 q"
b11111100 $"
b11111100 t"
b11111100 .$
b11111100 S$
b11111100 n&
b11111100 $'
b11111100 8'
b0 +%
b0 8"
b0 /$
b0 R$
b0 )%
b0 $&
b0 4&
b0 8&
b11011111 r%
0;"
1Z
b0 V&
b11111100 #"
b11111100 P$
b11111100 F&
b10 H&
b10 S&
b100 ^&
b0 7"
b0 Q$
b0 V$
b11011111 g%
b11011111 >"
b11011111 o#
b0 -$
0,$
13
07
b0 9$
b0 <"
b0 1$
b0 7$
b0 3"
b0 (%
b1101111111011111 e%
b11011111 /"
b11011111 J%
b1100110011011111 s#
b11011110 i"
b0 2$
b0 0$
12
1o&
b100 G&
b100 R&
08$
0*$
0'$
0%$
0'%
b0 W$
b0 b$
02"
b1100110011011111 M%
b1100110011011110 r#
b11011110 ]"
b11011110 A"
b11011110 `"
b11011110 ?#
b11011110 n#
b11011110 }#
b0 [
b10000000000000000000000000000000000000000000001000000000000000000100000000011011100 5
b10000000000000000000000000000000000000000000001000000000000000000100000000011011100 Q
b10000000000000000000000000000000000000000000001000000000000000000100000000011011100 |
b11111101111111000000000000000000 E&
b11111100 9"
b11111100 :"
b1100110011011110 L%
b11011110 )"
b11011110 I%
b1100110011011110000000000100100000000000 U$
b11011110 *"
b1111110111111100110111100100100000000000 >#
b11011110 +"
b10 J
b10 \
b1111110011111100 ;$
b11111100 C$
b110111101101111011011110 i%
b11011110 q%
b11011101 "
b11011101 :
b11011101 y
b11011101 F"
b11011101 _"
b11011101 h"
b11001100 #
b11001100 ;
b11001100 x
b11001100 G"
b11001100 K"
b11001100 T"
1'
#2800
0'
#2900
b1100110000000001 N%
b1 ?"
b1 p#
b1 U"
0_
b1 I"
b1 C"
b1 L"
b1 q#
b1 T$
b0 p&
b0 &'
b0 :'
b0 q"
b0 $"
b0 t"
b0 .$
b0 S$
b0 n&
b0 $'
b0 8'
b11011110 r%
b10 X$
b10 c$
b100 n$
b10000 \#
b100 A#
b100 K#
b0 U#
b1 B"
b1 '#
b1 K$
b0 )#
b0 1#
b0 9#
b0 #"
b0 P$
b0 F&
b0 H&
b0 S&
b0 ^&
b11011110 g%
b11111011 >"
b11111011 o#
b110011000100100000000001 &#
b1 @"
b1 k#
1v
03
b1101111011111011 e%
b11011110 /"
b11011110 J%
b111111011 s#
b11111100 i"
1*%
b110000 9
b110000 '"
b110000 &&
b110000 0&
b110000 6&
b110000 :&
1'&
b100 W$
b100 b$
1d#
1F%
1l#
02
b10000 @#
b10000 J#
b1 (#
b1 0#
b0 G&
b0 R&
0o&
0G%
0m#
b1100110011011110 M%
b111111100 r#
b11111100 ]"
b11111100 A"
b11111100 `"
b11111100 ?#
b11111100 n#
b11111100 }#
0Z
b100000000000000001000000000000000110000000001000000000000000000000000000101100 5
b100000000000000001000000000000000110000000001000000000000000000000000000101100 Q
b100000000000000001000000000000000110000000001000000000000000000000000000101100 |
b1100110011011111 L%
b11011111 )"
b11011111 I%
b1100110011011111000000000100100000000000 U$
b11011111 *"
b11011111 +"
b1111110011111100110111110100100000000000 >#
b11111100 ""
b11111100111111000000000000000000 E&
b11111100 !"
b0 J
b0 \
1K
b11011110 "
b11011110 :
b11011110 y
b11011110 F"
b11011110 _"
b11011110 h"
b110111111101111111011111 i%
b11011111 q%
b1111110011111100 r&
b11111100 z&
1'
#3000
0'
#3100
b11011101 r%
b11011101 g%
b1101110111111011 e%
b11011101 /"
b11011101 J%
b1100110011011101 M%
b1 [
b100000000000000001000000000000000110000000001000000000000000000000000000101100 5
b100000000000000001000000000000000110000000001000000000000000000000000000101100 Q
b100000000000000001000000000000000110000000001000000000000000000000000000101100 |
b1100110011011110 L%
b11011110 )"
b11011110 I%
b1100110011011110000000000100100000000000 U$
b11011110 *"
b1111110011111100110111100100100000000000 >#
b11011110 +"
0K
b110111101101111011011110 i%
b11011110 q%
b11111100 "
b11111100 :
b11111100 y
b11111100 F"
b11111100 _"
b11111100 h"
b1 #
b1 ;
b1 x
b1 G"
b1 K"
b1 T"
1'
#3200
