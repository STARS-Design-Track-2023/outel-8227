$date
	Tue Jun 27 13:16:00 2023
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_8227_template $end
$var wire 8 ! tb_dataBusOutput [7:0] $end
$var wire 8 " tb_AddressBusLow [7:0] $end
$var wire 8 # tb_AddressBusHigh [7:0] $end
$var reg 8 $ targetHighAddress [7:0] $end
$var reg 8 % targetLowAddress [7:0] $end
$var reg 1 & tb_clk $end
$var reg 8 ' tb_dataBusInput [7:0] $end
$var reg 1 ( tb_interruptRequest $end
$var reg 1 ) tb_nonMaskableInterrupt $end
$var reg 1 * tb_nrst $end
$var reg 1025 + test_name [1024:0] $end
$scope module top8227 $end
$var wire 1 & clk $end
$var wire 8 , dataBusInput [7:0] $end
$var wire 1 ( interruptRequest $end
$var wire 1 ) nonMaskableInterrupt $end
$var wire 1 * nrst $end
$var wire 1 - resetRunning $end
$var wire 8 . opcodeCurrentValue [7:0] $end
$var wire 1 / nmiRunning $end
$var wire 6 0 instructionCode [5:0] $end
$var wire 1 1 getInstructionPreInjection $end
$var wire 1 2 getInstructionPostInjection $end
$var wire 1 3 freeCarry $end
$var wire 128 4 flags [127:0] $end
$var wire 8 5 dataBusOutput [7:0] $end
$var wire 1 6 aluCarryOut $end
$var wire 4 7 addressingCode [3:0] $end
$var wire 8 8 PSRCurrentValue [7:0] $end
$var wire 8 9 AddressBusLow [7:0] $end
$var wire 8 : AddressBusHigh [7:0] $end
$scope module decoder $end
$var wire 8 ; opcode [7:0] $end
$var wire 2 < c [1:0] $end
$var wire 3 = b [2:0] $end
$var wire 3 > a [2:0] $end
$var reg 4 ? ADDRESS [3:0] $end
$var reg 6 @ CMD [5:0] $end
$scope begin comb_decoder $end
$upscope $end
$upscope $end
$scope module demux $end
$var wire 1 A PSR_C $end
$var wire 1 B PSR_N $end
$var wire 1 C PSR_V $end
$var wire 1 D PSR_Z $end
$var wire 1 & clk $end
$var wire 1 E irq $end
$var wire 1 F jump $end
$var wire 1 * nrst $end
$var wire 4 G preFFAddressingCode [3:0] $end
$var wire 6 H preFFInstructionCode [5:0] $end
$var wire 3 I state [2:0] $end
$var wire 1 - reset $end
$var wire 1 / nmi $end
$var wire 1 J isAddressing $end
$var wire 6 K instructionCode [5:0] $end
$var wire 1 1 getInstructionPreInjection $end
$var wire 1 2 getInstructionPostInjection $end
$var wire 1 3 free_carry $end
$var wire 4 L addressingCode [3:0] $end
$var reg 1 M IS_STORE_ACC_INSTRUCT $end
$var reg 1 N IS_STORE_X_INSTRUCT $end
$var reg 1 O IS_STORE_Y_INSTRUCT $end
$var reg 128 P outflags [127:0] $end
$var reg 1 Q passAddressing $end
$scope module state_machine $end
$var wire 1 & clk $end
$var wire 4 R decodedAddress [3:0] $end
$var wire 6 S decodedInstruction [5:0] $end
$var wire 1 T endAddressing $end
$var wire 1 Q noAddressing $end
$var wire 1 * nrst $end
$var wire 1 2 getInstruction $end
$var reg 4 U currentAddress [3:0] $end
$var reg 6 V currentInstruction [5:0] $end
$var reg 1 J mode $end
$var reg 4 W nextAddress [3:0] $end
$var reg 6 X nextInstruction [5:0] $end
$var reg 1 Y nextMode $end
$var reg 3 Z nextTime [2:0] $end
$var reg 3 [ timeState [2:0] $end
$scope begin comb_OPCode $end
$upscope $end
$scope begin comb_timingGeneration $end
$upscope $end
$scope begin ff_OPCode $end
$upscope $end
$scope begin ff_timingGeneration_mode $end
$upscope $end
$scope begin ff_timingGeneration_timeState $end
$upscope $end
$upscope $end
$scope begin blockName $end
$upscope $end
$upscope $end
$scope module free_carry_ff $end
$var wire 1 & clk $end
$var wire 1 \ en $end
$var wire 1 * nrst $end
$var wire 1 6 ALUcarry $end
$var reg 1 3 freeCarry $end
$var reg 1 ] freeCarryNext $end
$scope begin comb_free_carry_ff $end
$upscope $end
$scope begin ff_free_carry_ff $end
$upscope $end
$upscope $end
$scope module instructionLoader $end
$var wire 1 & clk $end
$var wire 1 ^ enableIFlag $end
$var wire 8 _ externalDB [7:0] $end
$var wire 1 ( interruptRequest $end
$var wire 1 1 loadNextInstruction $end
$var wire 1 ) nonMaskableInterrupt $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 - resetRunning $end
$var wire 1 a resetDetected $end
$var wire 1 / nmiRunning $end
$var wire 1 b nmiGenerated $end
$var wire 1 c irqGenerated $end
$var reg 1 2 instructionRegReadEnable $end
$var reg 8 d nextInstruction [7:0] $end
$scope module interruptInjector $end
$var wire 1 & clk $end
$var wire 1 2 interruptAcknowleged $end
$var wire 1 ( interruptRequest $end
$var wire 1 ) nonMaskableInterrupt $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 e synchronizedNMI $end
$var wire 1 f synchronizedIRQ $end
$var wire 1 - resetRunning $end
$var wire 1 a resetDetected $end
$var wire 1 / nmiRunning $end
$var wire 1 b nmiGenerated $end
$var wire 1 c irqGenerated $end
$scope module irqGeneratedFF $end
$var wire 1 & clk $end
$var wire 1 2 interruptAcknowleged $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 f synchronizedIRQ $end
$var reg 1 c irqGenerated $end
$var reg 1 g nextIRQGenerated $end
$scope begin IRQNextStateLogic $end
$upscope $end
$scope begin nmiAssignment $end
$upscope $end
$upscope $end
$scope module irqSync $end
$var wire 1 & clk $end
$var wire 1 ( in $end
$var wire 1 * nrst $end
$var reg 1 h nextQ1 $end
$var reg 1 i nextQ2 $end
$var reg 1 f out $end
$var reg 1 j q1 $end
$var reg 1 k q2 $end
$scope begin nextStateAssignment $end
$upscope $end
$scope begin nextStateLogic $end
$upscope $end
$scope begin outputLogic $end
$upscope $end
$upscope $end
$scope module nmiGeneratedFF $end
$var wire 1 & clk $end
$var wire 1 2 interruptAcknowleged $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 e synchronizedNMI $end
$var wire 1 / nmiRunning $end
$var reg 1 l nextNMIGenerated $end
$var reg 1 b nmiGenerated $end
$scope begin NMInextStateLogic $end
$upscope $end
$scope begin nmiAssignment $end
$upscope $end
$upscope $end
$scope module nmiRunningFF $end
$var wire 1 & clk $end
$var wire 1 2 interruptAcknowleged $end
$var wire 1 b nmiGenerated $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 e synchronizedNMI $end
$var reg 1 m nextNMIRunning $end
$var reg 1 / nmiRunning $end
$scope begin NMInextStateLogic $end
$upscope $end
$scope begin nmiAssignment $end
$upscope $end
$upscope $end
$scope module nmiSync $end
$var wire 1 & clk $end
$var wire 1 ) in $end
$var wire 1 * nrst $end
$var reg 1 n nextQ1 $end
$var reg 1 o nextQ2 $end
$var reg 1 e out $end
$var reg 1 p q1 $end
$var reg 1 q q2 $end
$scope begin nextStateAssignment $end
$upscope $end
$scope begin nextStateLogic $end
$upscope $end
$scope begin outputLogic $end
$upscope $end
$upscope $end
$scope module resetDetector $end
$var wire 1 & clk $end
$var wire 1 r nextState $end
$var wire 1 * nrst $end
$var reg 1 a resetInection $end
$var reg 1 s state $end
$scope begin nextStateAssignment $end
$upscope $end
$scope begin outputLogic $end
$upscope $end
$upscope $end
$scope module resetRunningFF $end
$var wire 1 & clk $end
$var wire 1 * nrst $end
$var wire 1 ` processStatusRegIFlag $end
$var wire 1 a resetInitiated $end
$var reg 1 t nextResetRunning $end
$var reg 1 - resetRunning $end
$scope begin nmiAssignment $end
$upscope $end
$scope begin resetRunningNextStateLogic $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module internalDataflow $end
$var wire 1 u adhPresetWriteEnable $end
$var wire 1 v adlPresetWriteEnable $end
$var wire 1 & clk $end
$var wire 8 w externalAddressBusHighOutput [7:0] $end
$var wire 8 x externalAddressBusLowOutput [7:0] $end
$var wire 8 y externalDBRead [7:0] $end
$var wire 8 z externalDBWrite [7:0] $end
$var wire 128 { flags [127:0] $end
$var wire 1 * nrst $end
$var wire 8 | yRegToSB [7:0] $end
$var wire 8 } xRegToSB [7:0] $end
$var wire 8 ~ stackPointerRegToSB [7:0] $end
$var wire 8 !" stackPointerRegToADL [7:0] $end
$var wire 8 "" stackBusDisconnected [7:0] $end
$var wire 8 #" stackBus [7:0] $end
$var wire 1 $" sbPresetWriteEnable $end
$var wire 8 %" sbPresetOutput [7:0] $end
$var wire 8 &" psrRegToLogicController [7:0] $end
$var wire 8 '" psrRegToDB [7:0] $end
$var wire 8 (" pclRegToPcIncrementer [7:0] $end
$var wire 8 )" pclRegToDB [7:0] $end
$var wire 8 *" pclRegToADL [7:0] $end
$var wire 8 +" pchRegToPcIncrementer [7:0] $end
$var wire 8 ," pchRegToDB [7:0] $end
$var wire 8 -" pchRegToADH [7:0] $end
$var wire 8 ." pcIncrementerToPclReg [7:0] $end
$var wire 8 /" pcIncrementerToPchReg [7:0] $end
$var wire 8 0" dorRegToExternalDB [7:0] $end
$var wire 1 1" dbPresetWriteEnable $end
$var wire 8 2" dbPresetOutput [7:0] $end
$var wire 8 3" dataToDB [7:0] $end
$var wire 8 4" dataToADL [7:0] $end
$var wire 8 5" dataToADH [7:0] $end
$var wire 8 6" dataBusDisconnected [7:0] $end
$var wire 8 7" dataBus [7:0] $end
$var wire 8 8" aluRegToSB [7:0] $end
$var wire 8 9" aluRegToADL [7:0] $end
$var wire 1 :" aluOverflowOut $end
$var wire 8 ;" aluOutput [7:0] $end
$var wire 1 6 aluCarryOut $end
$var wire 8 <" adlPresetOutput [7:0] $end
$var wire 8 =" adlADHIncrementerToPclReg [7:0] $end
$var wire 8 >" adlADHIncrementerToPchReg [7:0] $end
$var wire 8 ?" adhPresetOutput [7:0] $end
$var wire 8 @" addressLowBus [7:0] $end
$var wire 8 A" addressHighBusDisconnected [7:0] $end
$var wire 8 B" addressHighBus [7:0] $end
$var wire 8 C" accRegToSB [7:0] $end
$var wire 8 D" accRegToDB [7:0] $end
$var wire 8 E" ablRegToExternalADL [7:0] $end
$var wire 8 F" abhRegToExternalADH [7:0] $end
$scope module abhRegister $end
$var wire 1 G" busReadEnable $end
$var wire 1 & clk $end
$var wire 8 H" muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 I" busSelectEncoded $end
$var wire 8 J" busOutputs [7:0] $end
$var wire 8 K" busInputs [7:0] $end
$var reg 8 L" currentState [7:0] $end
$var reg 8 M" nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 G" select $end
$var wire 1 I" encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 N" temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ablRegister $end
$var wire 1 O" busReadEnable $end
$var wire 1 & clk $end
$var wire 8 P" muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 Q" busSelectEncoded $end
$var wire 8 R" busOutputs [7:0] $end
$var wire 8 S" busInputs [7:0] $end
$var reg 8 T" currentState [7:0] $end
$var reg 8 U" nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 O" select $end
$var wire 1 Q" encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 V" temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module accumulatorRegister $end
$var wire 1 W" busReadEnable $end
$var wire 1 & clk $end
$var wire 8 X" muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 Y" busSelectEncoded $end
$var wire 16 Z" busOutputs [15:0] $end
$var wire 8 [" busInputs [7:0] $end
$var reg 8 \" currentState [7:0] $end
$var reg 8 ]" nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 W" select $end
$var wire 1 Y" encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 ^" temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module addressHighBusModule $end
$var wire 24 _" busInputs [23:0] $end
$var wire 8 `" busOutput [7:0] $end
$var wire 3 a" busSelect [2:0] $end
$var wire 2 b" busSelectEncoded [1:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope module encoder $end
$var wire 3 c" select [2:0] $end
$var wire 2 d" encodedSelect [1:0] $end
$scope begin genblk1[0] $end
$var wire 3 e" temp [2:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 3 f" temp [2:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module addressLowBusModule $end
$var wire 40 g" busInputs [39:0] $end
$var wire 8 h" busOutput [7:0] $end
$var wire 5 i" busSelect [4:0] $end
$var wire 3 j" busSelectEncoded [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope module encoder $end
$var wire 5 k" select [4:0] $end
$var wire 3 l" encodedSelect [2:0] $end
$scope begin genblk1[0] $end
$var wire 5 m" temp [4:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 5 n" temp [4:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 5 o" temp [4:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module adhPreset $end
$var wire 1 p" set_00 $end
$var wire 1 q" set_01 $end
$var wire 1 r" set_FA $end
$var wire 1 s" set_FB $end
$var wire 1 t" set_FC $end
$var wire 1 u" set_FD $end
$var wire 1 v" set_FE $end
$var wire 1 w" set_FF $end
$var reg 8 x" bus_out [7:0] $end
$upscope $end
$scope module adlADHIncrementor $end
$var wire 1 y" decrement $end
$var wire 1 z" increment $end
$var wire 8 {" output_lowbyte [7:0] $end
$var wire 8 |" output_highbyte [7:0] $end
$var wire 8 }" input_lowbyte [7:0] $end
$var wire 8 ~" input_highbyte [7:0] $end
$var wire 16 !# address [15:0] $end
$var reg 16 "# nextAddress [15:0] $end
$upscope $end
$scope module adlPreset $end
$var wire 1 ## set_00 $end
$var wire 1 $# set_01 $end
$var wire 1 %# set_FA $end
$var wire 1 &# set_FB $end
$var wire 1 '# set_FC $end
$var wire 1 (# set_FD $end
$var wire 1 )# set_FE $end
$var wire 1 *# set_FF $end
$var reg 8 +# bus_out [7:0] $end
$upscope $end
$scope module alu $end
$var wire 8 ,# ADL_input [7:0] $end
$var wire 1 -# carry_in $end
$var wire 1 .# e_and $end
$var wire 1 /# e_eor $end
$var wire 1 0# e_or $end
$var wire 1 1# e_shiftr $end
$var wire 1 2# e_sum $end
$var wire 1 3# enable_dec $end
$var wire 1 4# lda_sb $end
$var wire 1 5# lda_zero $end
$var wire 1 6# ldb_adl $end
$var wire 1 7# ldb_db $end
$var wire 1 8# ldb_inv_db $end
$var wire 1 :" overflow $end
$var wire 1 9# sum_carry_out $end
$var wire 8 :# sum [7:0] $end
$var wire 8 ;# SB_input [7:0] $end
$var wire 8 <# DB_input [7:0] $end
$var reg 8 =# a [7:0] $end
$var reg 8 ># alu_out [7:0] $end
$var reg 8 ?# b [7:0] $end
$var reg 8 @# bcd_buffer [7:0] $end
$var reg 1 6 carry_out $end
$var reg 4 A# hi_nib [3:0] $end
$var reg 4 B# lo_nib [3:0] $end
$var reg 7 C# rot_buffer [6:0] $end
$upscope $end
$scope module aluRegister $end
$var wire 8 D# busInputs [7:0] $end
$var wire 1 E# busReadEnable $end
$var wire 1 & clk $end
$var wire 8 F# muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 G# busSelectEncoded $end
$var wire 16 H# busOutputs [15:0] $end
$var reg 8 I# currentState [7:0] $end
$var reg 8 J# nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 E# select $end
$var wire 1 G# encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 K# temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module bridge $end
$var wire 8 L# bus3Input [7:0] $end
$var wire 1 M# open1To2 $end
$var wire 1 N# open2To1 $end
$var wire 1 O# open2To3 $end
$var wire 1 P# open3To2 $end
$var wire 8 Q# bus2Input [7:0] $end
$var wire 8 R# bus1Input [7:0] $end
$var reg 8 S# bus1Output [7:0] $end
$var reg 8 T# bus2Output [7:0] $end
$var reg 8 U# bus3Output [7:0] $end
$upscope $end
$scope module dataBusModule $end
$var wire 48 V# busInputs [47:0] $end
$var wire 8 W# busOutput [7:0] $end
$var wire 6 X# busSelect [5:0] $end
$var wire 3 Y# busSelectEncoded [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope module encoder $end
$var wire 6 Z# select [5:0] $end
$var wire 3 [# encodedSelect [2:0] $end
$scope begin genblk1[0] $end
$var wire 6 \# temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 6 ]# temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 6 ^# temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module dbPreset $end
$var wire 1 _# set_00 $end
$var wire 1 `# set_01 $end
$var wire 1 a# set_FA $end
$var wire 1 b# set_FB $end
$var wire 1 c# set_FC $end
$var wire 1 d# set_FD $end
$var wire 1 e# set_FE $end
$var wire 1 f# set_FF $end
$var reg 8 g# bus_out [7:0] $end
$upscope $end
$scope module dorRegister $end
$var wire 8 h# busInputs [7:0] $end
$var wire 1 i# busReadEnable $end
$var wire 1 & clk $end
$var wire 8 j# muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 k# busSelectEncoded $end
$var wire 8 l# busOutputs [7:0] $end
$var reg 8 m# currentState [7:0] $end
$var reg 8 n# nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 i# select $end
$var wire 1 k# encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 o# temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module externalDBToADH $end
$var wire 1 p# enable $end
$var wire 8 q# interfaceInput [7:0] $end
$var reg 8 r# interfaceOutput [7:0] $end
$upscope $end
$scope module externalDBToADL $end
$var wire 1 s# enable $end
$var wire 8 t# interfaceInput [7:0] $end
$var reg 8 u# interfaceOutput [7:0] $end
$upscope $end
$scope module externalDBToDB $end
$var wire 1 v# enable $end
$var wire 8 w# interfaceInput [7:0] $end
$var reg 8 x# interfaceOutput [7:0] $end
$upscope $end
$scope module pcIncrementor $end
$var wire 1 y# decrement $end
$var wire 1 z# increment $end
$var wire 8 {# input_highbyte [7:0] $end
$var wire 8 |# input_lowbyte [7:0] $end
$var wire 8 }# output_lowbyte [7:0] $end
$var wire 8 ~# output_highbyte [7:0] $end
$var wire 16 !$ address [15:0] $end
$var reg 16 "$ nextAddress [15:0] $end
$upscope $end
$scope module pchRegister $end
$var wire 16 #$ busInputs [15:0] $end
$var wire 2 $$ busReadEnable [1:0] $end
$var wire 1 & clk $end
$var wire 8 %$ muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 &$ busSelectEncoded $end
$var wire 24 '$ busOutputs [23:0] $end
$var reg 8 ($ currentState [7:0] $end
$var reg 8 )$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope module encoder $end
$var wire 2 *$ select [1:0] $end
$var wire 1 &$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 2 +$ temp [1:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pclRegister $end
$var wire 16 ,$ busInputs [15:0] $end
$var wire 2 -$ busReadEnable [1:0] $end
$var wire 1 & clk $end
$var wire 8 .$ muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 /$ busSelectEncoded $end
$var wire 24 0$ busOutputs [23:0] $end
$var reg 8 1$ currentState [7:0] $end
$var reg 8 2$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope module encoder $end
$var wire 2 3$ select [1:0] $end
$var wire 1 /$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 2 4$ temp [1:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module psr $end
$var wire 1 5$ DB0_C $end
$var wire 1 6$ DB1_Z $end
$var wire 1 7$ DB2_I $end
$var wire 1 8$ DB3_D $end
$var wire 1 9$ DB6_V $end
$var wire 1 :$ DB7_N $end
$var wire 8 ;$ DB_in [7:0] $end
$var wire 1 <$ DBall_Z $end
$var wire 8 =$ PSR_RCL [7:0] $end
$var wire 1 >$ break_set $end
$var wire 1 6 carry $end
$var wire 1 ?$ carry_C $end
$var wire 1 & clk $end
$var wire 1 @$ enableDBWrite $end
$var wire 1 A$ manual_C $end
$var wire 1 B$ manual_D $end
$var wire 1 C$ manual_I $end
$var wire 1 D$ manual_set $end
$var wire 1 * nrst $end
$var wire 1 :" overflow $end
$var wire 1 E$ overflow_V $end
$var wire 1 F$ rcl_V $end
$var wire 8 G$ internalFFOutput [7:0] $end
$var wire 8 H$ internalFFInput [7:0] $end
$var wire 8 I$ PSR_DB [7:0] $end
$scope module inputInterface $end
$var wire 1 J$ enable $end
$var wire 8 K$ interfaceInput [7:0] $end
$var reg 8 L$ interfaceOutput [7:0] $end
$upscope $end
$scope module outputInterface $end
$var wire 1 @$ enable $end
$var wire 8 M$ interfaceInput [7:0] $end
$var reg 8 N$ interfaceOutput [7:0] $end
$upscope $end
$scope module processStatusReg $end
$var wire 1 5$ DB0_C $end
$var wire 1 6$ DB1_Z $end
$var wire 1 7$ DB2_I $end
$var wire 1 8$ DB3_D $end
$var wire 1 9$ DB6_V $end
$var wire 1 :$ DB7_N $end
$var wire 8 O$ DB_in [7:0] $end
$var wire 1 <$ DBall_Z $end
$var wire 1 >$ break_set $end
$var wire 1 6 carry $end
$var wire 1 ?$ carry_C $end
$var wire 1 & clk $end
$var wire 1 A$ manual_C $end
$var wire 1 B$ manual_D $end
$var wire 1 C$ manual_I $end
$var wire 1 D$ manual_set $end
$var wire 1 * nrst $end
$var wire 1 :" overflow $end
$var wire 1 E$ overflow_V $end
$var wire 1 F$ rcl_V $end
$var wire 8 P$ stat_buf_nxt [7:0] $end
$var wire 8 Q$ PSR_Output [7:0] $end
$var reg 8 R$ status_buffer [7:0] $end
$upscope $end
$upscope $end
$scope module sbPreset $end
$var wire 1 S$ set_00 $end
$var wire 1 T$ set_01 $end
$var wire 1 U$ set_FA $end
$var wire 1 V$ set_FB $end
$var wire 1 W$ set_FC $end
$var wire 1 X$ set_FD $end
$var wire 1 Y$ set_FE $end
$var wire 1 Z$ set_FF $end
$var reg 8 [$ bus_out [7:0] $end
$upscope $end
$scope module stackBusModule $end
$var wire 48 \$ busInputs [47:0] $end
$var wire 8 ]$ busOutput [7:0] $end
$var wire 6 ^$ busSelect [5:0] $end
$var wire 3 _$ busSelectEncoded [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope module encoder $end
$var wire 6 `$ select [5:0] $end
$var wire 3 a$ encodedSelect [2:0] $end
$scope begin genblk1[0] $end
$var wire 6 b$ temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 6 c$ temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 6 d$ temp [5:0] $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module stackPointerRegister $end
$var wire 8 e$ busInputs [7:0] $end
$var wire 1 f$ busReadEnable $end
$var wire 1 & clk $end
$var wire 8 g$ muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 h$ busSelectEncoded $end
$var wire 16 i$ busOutputs [15:0] $end
$var reg 8 j$ currentState [7:0] $end
$var reg 8 k$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 f$ select $end
$var wire 1 h$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 l$ temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module xRegister $end
$var wire 8 m$ busInputs [7:0] $end
$var wire 1 n$ busReadEnable $end
$var wire 1 & clk $end
$var wire 8 o$ muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 p$ busSelectEncoded $end
$var wire 8 q$ busOutputs [7:0] $end
$var reg 8 r$ currentState [7:0] $end
$var reg 8 s$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 n$ select $end
$var wire 1 p$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 t$ temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module yRegister $end
$var wire 8 u$ busInputs [7:0] $end
$var wire 1 v$ busReadEnable $end
$var wire 1 & clk $end
$var wire 8 w$ muxOutput [7:0] $end
$var wire 1 * nrst $end
$var wire 1 x$ busSelectEncoded $end
$var wire 8 y$ busOutputs [7:0] $end
$var reg 8 z$ currentState [7:0] $end
$var reg 8 {$ nextState [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope module encoder $end
$var wire 1 v$ select $end
$var wire 1 x$ encodedSelect $end
$scope begin genblk1[0] $end
$var wire 1 |$ temp $end
$scope begin genblk2[0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope task reset_dut $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0|$
b0 {$
b0 z$
b0 y$
0x$
b0 w$
0v$
b0 u$
0t$
b0 s$
b0 r$
b0 q$
0p$
b0 o$
0n$
b0 m$
0l$
b0 k$
b0 j$
b0 i$
0h$
b0 g$
0f$
b0 e$
b0 d$
b0 c$
b0 b$
b0 a$
b0 `$
b0 _$
b0 ^$
b0 ]$
b0 \$
b0 [$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
b0 R$
b0 Q$
b0zz0000 P$
b0 O$
b0 N$
b0 M$
b0 L$
b0 K$
1J$
b0 I$
b0 H$
b0 G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
b0 =$
0<$
b0 ;$
0:$
09$
08$
07$
06$
05$
b10 4$
b10 3$
b0 2$
b0 1$
b0 0$
1/$
b0 .$
b10 -$
b0 ,$
b10 +$
b10 *$
b0 )$
b0 ($
b0 '$
1&$
b0 %$
b10 $$
b0 #$
b0 "$
b0 !$
b0 ~#
b0 }#
b0 |#
b0 {#
0z#
0y#
b0 x#
bx w#
0v#
b0 u#
bx t#
0s#
b0 r#
bx q#
0p#
0o#
b0 n#
b0 m#
b0 l#
0k#
b0 j#
0i#
b0 h#
b0 g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
b0 ^#
b0 ]#
b0 \#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0xxxxxxxx00000000 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
0P#
0O#
0N#
0M#
b0 L#
0K#
b0 J#
b0 I#
b0 H#
0G#
b0 F#
0E#
b0 D#
b0 C#
b0 B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
b0 ,#
b0 +#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
0z"
0y"
b0 x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0xxxxxxxx00000000 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0xxxxxxxx00000000 _"
0^"
b0 ]"
b0 \"
b0 ["
b0 Z"
0Y"
b0 X"
0W"
0V"
b0 U"
b0 T"
b0 S"
b0 R"
0Q"
b0 P"
0O"
0N"
b0 M"
b0 L"
b0 K"
b0 J"
0I"
b0 H"
0G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
0:"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
01"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
0$"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
bx y
b0 x
b0 w
0v
0u
1t
1s
0r
0q
0p
0o
xn
0m
0l
0k
0j
0i
xh
0g
0f
0e
b0 d
0c
0b
1a
0`
bx _
1^
0]
0\
b0 [
b0 Z
1Y
b1011 X
b101 W
b0 V
b0 U
0T
b1011 S
b101 R
1Q
b0 P
0O
0N
0M
b0 L
b0 K
0J
b0 I
b1011 H
b101 G
0F
0E
0D
0C
0B
0A
b1011 @
b101 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b101 7
06
b0 5
b0 4
03
12
01
b1011 0
0/
b0 .
0-
bx ,
b101001001100101011100110110010101110100 +
0*
x)
x(
bx '
0&
bx %
bx $
b0 #
b0 "
b0 !
$end
#100
1&
#200
0&
#300
1&
#400
1*
0&
#500
b10 7
b10 ?
b10 G
b10 R
b11001 0
b11001 @
b11001 H
b11001 S
b1 Z
bx <
bx =
bx >
02
bx .
bx ;
bx d
0^
1Y
0Q
0t
0a
xi
xo
b101 L
b101 U
b1011 K
b1011 V
1J
1-
0s
xj
xp
b0zz0000 R$
1&
#600
0&
#700
xg
xl
b10 Z
xf
xe
b1 I
b1 [
0-
xk
xq
1&
#800
0&
#900
b11 Z
b10 I
b10 [
xc
xb
1&
#1000
0&
#1100
b101 7
b101 ?
b101 G
b101 R
b1011 0
b1011 @
b1011 H
b1011 S
b0 <
b0 =
b0 >
1t
b0 .
b0 ;
b0 d
12
1^
b101 W
b1011 X
b0 Z
1Q
1a
0g
0l
0f
0i
0e
0o
b0 L
b0 U
b0 K
b0 V
b0 I
b0 [
0J
1s
0c
0b
0k
0j
0q
0p
b0 R$
0*
b1000010011011110110111101110100001000000101010101110000001000000111001101100101011100010111010101100101011011100110001101100101001000000101001001100101011100110110010101110100 +
1&
#1200
0&
#1300
1&
#1400
0&
#1500
1&
#1600
1*
0&
#1700
b10 7
b10 ?
b10 G
b10 R
b11001 0
b11001 @
b11001 H
b11001 S
b1 Z
bx <
bx =
bx >
02
bx .
bx ;
bx d
0^
1Y
0Q
0t
0a
xi
xo
b101 L
b101 U
b1011 K
b1011 V
1J
1-
0s
xj
xp
b0zz0000 R$
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110000 +
1&
#1800
0&
#1900
xg
xl
b10 Z
xf
xe
b1 I
b1 [
0-
xk
xq
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110001 +
1&
#2000
0&
#2100
b11 Z
b10 I
b10 [
xc
xb
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110010 +
1&
#2200
0&
#2300
b100 Z
b11 I
b11 [
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110011 +
1&
#2400
0&
#2500
b101 Z
0h
0n
b100 I
b100 [
0(
0)
b100001001101111011011110111010000100000010100110110010101110001001000000110001101101100011010110010000000110100 +
1&
#2600
b0 $
0&
#2700
b110 Z
0i
0o
b101 I
b101 [
0j
0p
1&
#2800
0&
#2900
b0 Z
0f
0e
b110 I
b110 [
0k
0q
1&
#3000
0&
#3100
b1 Z
b0 I
b0 [
1&
#3200
0&
#3300
b10 Z
b1 I
b1 [
1&
#3400
0&
#3500
b1010 7
b1010 ?
b1010 G
b1010 R
b11110 0
b11110 @
b11110 H
b11110 S
b1 <
b1 =
b101 >
b11 Z
b10100101 .
b10100101 ;
b10100101 d
b10 I
b10 [
b1010010100000000 V#
b1010010100000000 g"
b1010010100000000 _"
b10100101 '
b10100101 ,
b10100101 _
b10100101 y
b10100101 q#
b10100101 t#
b10100101 w#
b10001010111100001100001011011010111000001101100011001010010000001010100011001010111001101110100 +
1&
#3600
b11 7
b11 ?
b11 G
b11 R
b110000 0
b110000 @
b110000 H
b110000 S
b110 =
b100 >
b10011001 .
b10011001 ;
b10011001 d
b10011001 %
b1001100100000000 V#
b1001100100000000 g"
b1001100100000000 _"
b10011001 '
b10011001 ,
b10011001 _
b10011001 y
b10011001 q#
b10011001 t#
b10011001 w#
0&
#3700
b100 Z
b11 I
b11 [
1&
#3800
b10001100110100101101110011010010111001101101000011010010110111001100111 +
0&
#3900
b101 Z
b100 I
b100 [
1&
#4000
0&
#4100
b110 Z
b101 I
b101 [
1&
#4200
0&
#4300
b0 Z
b110 I
b110 [
1&
#4400
